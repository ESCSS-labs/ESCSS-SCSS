// arbitrary utility same as @mixin ring-($v)
@use "../setting" as *;

$RingWidth: (
  "ring-0": var(--tw-ring-inset) 0 0 0 calc(0px + var(--tw-ring-offset-width))
    var(--tw-ring-color),
  "ring-1": var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width))
    var(--tw-ring-color),
  "ring-2": var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width))
    var(--tw-ring-color),
  "ring": var(--tw-ring-inset) 0 0 0 calc(3px + var(--tw-ring-offset-width))
    var(--tw-ring-color),
  "ring-4": var(--tw-ring-inset) 0 0 0 calc(4px + var(--tw-ring-offset-width))
    var(--tw-ring-color),
  "ring-8": var(--tw-ring-inset) 0 0 0 calc(8px + var(--tw-ring-offset-width))
    var(--tw-ring-color),
);

$RingWidth-inset: (
  "ring-inset": inset,
);

@if $QuickReference {
  @each $key, $value in $RingWidth {
    /*x
    @mixin #{$key} {
      --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
      --tw-ring-shadow: #{$value};

      box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
    }
    x*/
  }

  @each $key, $value in $RingWidth-inset {
    /*x
    @mixin #{$key} {
      --tw-ring-inset: #{$value};
    }
    x*/
  }
}
