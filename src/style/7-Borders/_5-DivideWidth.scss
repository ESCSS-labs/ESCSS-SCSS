@use "../setting" as *;

$DivideWidth: (
  "-0": 0px,
  null: 1px,
  "-2": 2px,
  "-4": 4px,
  "-8": 8px,
);

@if $isBasicUsage {
  /*x
  @mixin divide-x-reverse {
    --tw-divide-x-reverse: 1;
  }

  @mixin divide-y-reverse {
    --tw-divide-y-reverse: 1;
  }
  x*/
  @each $key, $value in $DivideWidth {
    /*x
    @mixin divide-x#{$key} {
      --tw-divide-x-reverse: 0;

      > :not([hidden]) ~ :not([hidden]) {
        border-right-width: calc(#{$value} * var(--tw-divide-x-reverse));
        border-left-width: calc(#{$value} * (1 - var(--tw-divide-x-reverse)));
      }
    }

    @mixin divide-y#{$key} {
      --tw-divide-y-reverse: 0;

      > :not([hidden]) ~ :not([hidden]) {
        border-top-width: calc(#{$value} * (1 - var(--tw-divide-y-reverse)));
        border-bottom-width: calc(#{$value} * var(--tw-divide-y-reverse));
      }
    }
    x*/
  }
}

@if $isUsingCustomValues {
  /*x
  @mixin divide-x-($v, $isReverse: false) {
    --tw-divide-x-reverse: 0;

    > :not([hidden]) ~ :not([hidden]) {
      border-right-width: calc($v * var(--tw-divide-x-reverse));
      border-left-width: calc($v * (1 - var(--tw-divide-x-reverse)));
    }
  }

  @mixin divide-y-($v, $isReverse: false) {
    --tw-divide-y-reverse: 0;

    > :not([hidden]) ~ :not([hidden]) {
      border-top-width: calc($v * (1 - var(--tw-divide-y-reverse)));
      border-bottom-width: calc($v * var(--tw-divide-y-reverse));
    }
  }
  x*/
}
