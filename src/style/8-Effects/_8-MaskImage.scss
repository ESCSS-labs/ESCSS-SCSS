// arbitrary utility same as @mixin shadow-($v)
@use "../setting" as *;

$MaskLinear: (
  "mask-linear-0": 0deg,
  "mask-linear-1": 1deg,
  "mask-linear-2": 2deg,
  "mask-linear-3": 3deg,
  "mask-linear-6": 6deg,
  "mask-linear-12": 12deg,
  "mask-linear-45": 45deg,
  "mask-linear-90": 90deg,
  "mask-linear-180": 180deg,
  "\\-mask-linear-0": -0deg,
  "\\-mask-linear-1": -1deg,
  "\\-mask-linear-2": -2deg,
  "\\-mask-linear-3": -3deg,
  "\\-mask-linear-6": -6deg,
  "\\-mask-linear-12": -12deg,
  "\\-mask-linear-45": -45deg,
  "\\-mask-linear-90": -90deg,
  "\\-mask-linear-180": -180deg,
);

$MaskRadialShape: (
  "mask-circle": circle,
  "mask-ellipse": ellipse,
);

$MaskRadialSize: (
  "mask-radial-closest-corner": closest-corner,
  "mask-radial-closest-side": closest-side,
  "mask-radial-farthest-corner": farthest-corner,
  "mask-radial-farthest-side": farthest-side,
);

$MaskRadialPosition: (
  "mask-radial-at-top-left": top left,
  "mask-radial-at-top": top,
  "mask-radial-at-top-right": top right,
  "mask-radial-at-left": left,
  "mask-radial-at-center":center,
  "mask-radial-at-right": right,
  "mask-radial-at-bottom-left": bottom left,
  "mask-radial-at-bottom": bottom,
  "mask-radial-at-bottom-right": bottom right,
);

$MaskConic: (
  "mask-conic-0": 0deg,
  "mask-conic-1": 1deg,
  "mask-conic-2": 2deg,
  "mask-conic-3": 3deg,
  "mask-conic-6": 6deg,
  "mask-conic-12": 12deg,
  "mask-conic-45": 45deg,
  "mask-conic-90": 90deg,
  "mask-conic-180": 180deg,
  "\\-mask-conic-0": -0deg,
  "\\-mask-conic-1": -1deg,
  "\\-mask-conic-2": -2deg,
  "\\-mask-conic-3": -3deg,
  "\\-mask-conic-6": -6deg,
  "\\-mask-conic-12": -12deg,
  "\\-mask-conic-45": -45deg,
  "\\-mask-conic-90": -90deg,
  "\\-mask-conic-180": -180deg,
);

$MaskFromToSpacing: (
  "0": "$spacing-0",
  "0\\.5": "$spacing-0\\.5",
  "1": "$spacing-1",
  "1\\.5": "$spacing-1\\.5",
  "2": "$spacing-2",
  "2\\.5": "$spacing-2\\.5",
  "3": "$spacing-3",
  "3\\.5": "$spacing-3\\.5",
  "4": "$spacing-4",
  "5": "$spacing-5",
  "6": "$spacing-6",
  "7": "$spacing-7",
  "8": "$spacing-8",
  "9": "$spacing-9",
  "10": "$spacing-10",
  "11": "$spacing-11",
  "12": "$spacing-12",
  "14": "$spacing-14",
  "16": "$spacing-16",
  "20": "$spacing-20",
  "24": "$spacing-24",
  "28": "$spacing-28",
  "32": "$spacing-32",
  "36": "$spacing-36",
  "40": "$spacing-40",
  "44": "$spacing-44",
  "48": "$spacing-48",
  "52": "$spacing-52",
  "56": "$spacing-56",
  "60": "$spacing-60",
  "64": "$spacing-64",
  "72": "$spacing-72",
  "80": "$spacing-80",
  "96": "$spacing-96",
  "0\\%:": 0%,
  "5\\%:": 5%,
  "10\\%:": 10%,
  "15\\%:": 15%,
  "20\\%:": 20%,
  "25\\%:": 25%,
  "30\\%:": 30%,
  "35\\%:": 35%,
  "40\\%:": 40%,
  "45\\%:": 45%,
  "50\\%:": 50%,
  "55\\%:": 55%,
  "60\\%:": 60%,
  "65\\%:": 65%,
  "70\\%:": 70%,
  "75\\%:": 75%,
  "85\\%:": 85%,
  "90\\%:": 90%,
  "95\\%:": 95%,
  "100\\%:": 100%,
);


$MaskFromToColor: (
  "name1-50": "$name1-50",
  "name1-100": "$name1-100",
  "name1-200": "$name1-200",
  "name1-300": "$name1-300",
  "name1-400": "$name1-400",
  "name1-500": "$name1-500",
  "name1-600": "$name1-600",
  "name1-700": "$name1-700",
  "name1-800": "$name1-800",
  "name1-900": "$name1-900",
  "name1-950": "$name1-950",
  "name2-50": "$name2-50",
  "name2-100": "$name2-100",
  "name2-200": "$name2-200",
  "name2-300": "$name2-300",
  "name2-400": "$name2-400",
  "name2-500": "$name2-500",
  "name2-600": "$name2-600",
  "name2-700": "$name2-700",
  "name2-800": "$name2-800",
  "name2-900": "$name2-900",
  "name2-950": "$name2-950",
  "name3-50": "$name3-50",
  "name3-100": "$name3-100",
  "name3-200": "$name3-200",
  "name3-300": "$name3-300",
  "name3-400": "$name3-400",
  "name3-500": "$name3-500",
  "name3-600": "$name3-600",
  "name3-700": "$name3-700",
  "name3-800": "$name3-800",
  "name3-900": "$name3-900",
  "name3-950": "$name3-950",
  "name4-100": "$name4-100",
  "name4-200": "$name4-200",
  "name4-300": "$name4-300",
  "name4-400": "$name4-400",
  "name4-500": "$name4-500",
  "name4-600": "$name4-600",
  "name4-700": "$name4-700",
  "name4-800": "$name4-800",
  "name4-900": "$name4-900",
  "name4-950": "$name4-950",
  "name5-100": "$name5-100",
  "name5-200": "$name5-200",
  "name5-300": "$name5-300",
  "name5-400": "$name5-400",
  "name5-500": "$name5-500",
  "name5-600": "$name5-600",
  "name5-700": "$name5-700",
  "name5-800": "$name5-800",
  "name5-900": "$name5-900",
  "name5-950": "$name5-950",
  "black": "$color-black",
  "white": "$color-white",
  "slate-50": "$color-slate-50",
  "slate-100": "$color-slate-100",
  "slate-200": "$color-slate-200",
  "slate-300": "$color-slate-300",
  "slate-400": "$color-slate-400",
  "slate-500": "$color-slate-500",
  "slate-600": "$color-slate-600",
  "slate-700": "$color-slate-700",
  "slate-800": "$color-slate-800",
  "slate-900": "$color-slate-900",
  "slate-950": "$color-slate-950",
  "gray-50": "$color-gray-50",
  "gray-100": "$color-gray-100",
  "gray-200": "$color-gray-200",
  "gray-300": "$color-gray-300",
  "gray-400": "$color-gray-400",
  "gray-500": "$color-gray-500",
  "gray-600": "$color-gray-600",
  "gray-700": "$color-gray-700",
  "gray-800": "$color-gray-800",
  "gray-900": "$color-gray-900",
  "gray-950": "$color-gray-950",
  "zinc-50": "$color-zinc-50",
  "zinc-100": "$color-zinc-100",
  "zinc-200": "$color-zinc-200",
  "zinc-300": "$color-zinc-300",
  "zinc-400": "$color-zinc-400",
  "zinc-500": "$color-zinc-500",
  "zinc-600": "$color-zinc-600",
  "zinc-700": "$color-zinc-700",
  "zinc-800": "$color-zinc-800",
  "zinc-900": "$color-zinc-900",
  "zinc-950": "$color-zinc-950",
  "neutral-50": "$color-neutral-50",
  "neutral-100": "$color-neutral-100",
  "neutral-200": "$color-neutral-200",
  "neutral-300": "$color-neutral-300",
  "neutral-400": "$color-neutral-400",
  "neutral-500": "$color-neutral-500",
  "neutral-600": "$color-neutral-600",
  "neutral-700": "$color-neutral-700",
  "neutral-800": "$color-neutral-800",
  "neutral-900": "$color-neutral-900",
  "neutral-950": "$color-neutral-950",
  "stone-50": "$color-stone-50",
  "stone-100": "$color-stone-100",
  "stone-200": "$color-stone-200",
  "stone-300": "$color-stone-300",
  "stone-400": "$color-stone-400",
  "stone-500": "$color-stone-500",
  "stone-600": "$color-stone-600",
  "stone-700": "$color-stone-700",
  "stone-800": "$color-stone-800",
  "stone-900": "$color-stone-900",
  "stone-950": "$color-stone-950",
  "red-50": "$color-red-50",
  "red-100": "$color-red-100",
  "red-200": "$color-red-200",
  "red-300": "$color-red-300",
  "red-400": "$color-red-400",
  "red-500": "$color-red-500",
  "red-600": "$color-red-600",
  "red-700": "$color-red-700",
  "red-800": "$color-red-800",
  "red-900": "$color-red-900",
  "red-950": "$color-red-950",
  "orange-50": "$color-orange-50",
  "orange-100": "$color-orange-100",
  "orange-200": "$color-orange-200",
  "orange-300": "$color-orange-300",
  "orange-400": "$color-orange-400",
  "orange-500": "$color-orange-500",
  "orange-600": "$color-orange-600",
  "orange-700": "$color-orange-700",
  "orange-800": "$color-orange-800",
  "orange-900": "$color-orange-900",
  "orange-950": "$color-orange-950",
  "amber-50": "$color-amber-50",
  "amber-100": "$color-amber-100",
  "amber-200": "$color-amber-200",
  "amber-300": "$color-amber-300",
  "amber-400": "$color-amber-400",
  "amber-500": "$color-amber-500",
  "amber-600": "$color-amber-600",
  "amber-700": "$color-amber-700",
  "amber-800": "$color-amber-800",
  "amber-900": "$color-amber-900",
  "amber-950": "$color-amber-950",
  "yellow-50": "$color-yellow-50",
  "yellow-100": "$color-yellow-100",
  "yellow-200": "$color-yellow-200",
  "yellow-300": "$color-yellow-300",
  "yellow-400": "$color-yellow-400",
  "yellow-500": "$color-yellow-500",
  "yellow-600": "$color-yellow-600",
  "yellow-700": "$color-yellow-700",
  "yellow-800": "$color-yellow-800",
  "yellow-900": "$color-yellow-900",
  "yellow-950": "$color-yellow-950",
  "lime-50": "$color-lime-50",
  "lime-100": "$color-lime-100",
  "lime-200": "$color-lime-200",
  "lime-300": "$color-lime-300",
  "lime-400": "$color-lime-400",
  "lime-500": "$color-lime-500",
  "lime-600": "$color-lime-600",
  "lime-700": "$color-lime-700",
  "lime-800": "$color-lime-800",
  "lime-900": "$color-lime-900",
  "lime-950": "$color-lime-950",
  "green-50": "$color-green-50",
  "green-100": "$color-green-100",
  "green-200": "$color-green-200",
  "green-300": "$color-green-300",
  "green-400": "$color-green-400",
  "green-500": "$color-green-500",
  "green-600": "$color-green-600",
  "green-700": "$color-green-700",
  "green-800": "$color-green-800",
  "green-900": "$color-green-900",
  "green-950": "$color-green-950",
  "emerald-50": "$color-emerald-50",
  "emerald-100": "$color-emerald-100",
  "emerald-200": "$color-emerald-200",
  "emerald-300": "$color-emerald-300",
  "emerald-400": "$color-emerald-400",
  "emerald-500": "$color-emerald-500",
  "emerald-600": "$color-emerald-600",
  "emerald-700": "$color-emerald-700",
  "emerald-800": "$color-emerald-800",
  "emerald-900": "$color-emerald-900",
  "emerald-950": "$color-emerald-950",
  "teal-50": "$color-teal-50",
  "teal-100": "$color-teal-100",
  "teal-200": "$color-teal-200",
  "teal-300": "$color-teal-300",
  "teal-400": "$color-teal-400",
  "teal-500": "$color-teal-500",
  "teal-600": "$color-teal-600",
  "teal-700": "$color-teal-700",
  "teal-800": "$color-teal-800",
  "teal-900": "$color-teal-900",
  "teal-950": "$color-teal-950",
  "cyan-50": "$color-cyan-50",
  "cyan-100": "$color-cyan-100",
  "cyan-200": "$color-cyan-200",
  "cyan-300": "$color-cyan-300",
  "cyan-400": "$color-cyan-400",
  "cyan-500": "$color-cyan-500",
  "cyan-600": "$color-cyan-600",
  "cyan-700": "$color-cyan-700",
  "cyan-800": "$color-cyan-800",
  "cyan-900": "$color-cyan-900",
  "cyan-950": "$color-cyan-950",
  "sky-50": "$color-sky-50",
  "sky-100": "$color-sky-100",
  "sky-200": "$color-sky-200",
  "sky-300": "$color-sky-300",
  "sky-400": "$color-sky-400",
  "sky-500": "$color-sky-500",
  "sky-600": "$color-sky-600",
  "sky-700": "$color-sky-700",
  "sky-800": "$color-sky-800",
  "sky-900": "$color-sky-900",
  "sky-950": "$color-sky-950",
  "blue-50": "$color-blue-50",
  "blue-100": "$color-blue-100",
  "blue-200": "$color-blue-200",
  "blue-300": "$color-blue-300",
  "blue-400": "$color-blue-400",
  "blue-500": "$color-blue-500",
  "blue-600": "$color-blue-600",
  "blue-700": "$color-blue-700",
  "blue-800": "$color-blue-800",
  "blue-900": "$color-blue-900",
  "blue-950": "$color-blue-950",
  "indigo-50": "$color-indigo-50",
  "indigo-100": "$color-indigo-100",
  "indigo-200": "$color-indigo-200",
  "indigo-300": "$color-indigo-300",
  "indigo-400": "$color-indigo-400",
  "indigo-500": "$color-indigo-500",
  "indigo-600": "$color-indigo-600",
  "indigo-700": "$color-indigo-700",
  "indigo-800": "$color-indigo-800",
  "indigo-900": "$color-indigo-900",
  "indigo-950": "$color-indigo-950",
  "violet-50": "$color-violet-50",
  "violet-100": "$color-violet-100",
  "violet-200": "$color-violet-200",
  "violet-300": "$color-violet-300",
  "violet-400": "$color-violet-400",
  "violet-500": "$color-violet-500",
  "violet-600": "$color-violet-600",
  "violet-700": "$color-violet-700",
  "violet-800": "$color-violet-800",
  "violet-900": "$color-violet-900",
  "violet-950": "$color-violet-950",
  "purple-50": "$color-purple-50",
  "purple-100": "$color-purple-100",
  "purple-200": "$color-purple-200",
  "purple-300": "$color-purple-300",
  "purple-400": "$color-purple-400",
  "purple-500": "$color-purple-500",
  "purple-600": "$color-purple-600",
  "purple-700": "$color-purple-700",
  "purple-800": "$color-purple-800",
  "purple-900": "$color-purple-900",
  "purple-950": "$color-purple-950",
  "fuchsia-50": "$color-fuchsia-50",
  "fuchsia-100": "$color-fuchsia-100",
  "fuchsia-200": "$color-fuchsia-200",
  "fuchsia-300": "$color-fuchsia-300",
  "fuchsia-400": "$color-fuchsia-400",
  "fuchsia-500": "$color-fuchsia-500",
  "fuchsia-600": "$color-fuchsia-600",
  "fuchsia-700": "$color-fuchsia-700",
  "fuchsia-800": "$color-fuchsia-800",
  "fuchsia-900": "$color-fuchsia-900",
  "fuchsia-950": "$color-fuchsia-950",
  "pink-50": "$color-pink-50",
  "pink-100": "$color-pink-100",
  "pink-200": "$color-pink-200",
  "pink-300": "$color-pink-300",
  "pink-400": "$color-pink-400",
  "pink-500": "$color-pink-500",
  "pink-600": "$color-pink-600",
  "pink-700": "$color-pink-700",
  "pink-800": "$color-pink-800",
  "pink-900": "$color-pink-900",
  "pink-950": "$color-pink-950",
  "rose-50": "$color-rose-50",
  "rose-100": "$color-rose-100",
  "rose-200": "$color-rose-200",
  "rose-300": "$color-rose-300",
  "rose-400": "$color-rose-400",
  "rose-500": "$color-rose-500",
  "rose-600": "$color-rose-600",
  "rose-700": "$color-rose-700",
  "rose-800": "$color-rose-800",
  "rose-900": "$color-rose-900",
  "rose-950": "$color-rose-950",
);


@if $QuickReference {
  /*x
  @mixin mask-none	{
    mask-image: none;
  }
  x*/

  @each $key, $value in $MaskLinear {
    /*x
    @mixin #{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: linear-gradient(var(--tw-mask-linear-stops, var(--tw-mask-linear-position)));
      --tw-mask-linear-position: #{$value};
    }
    x*/
  }

  @each $key, $value in $MaskRadialShape {
    /*x
    @mixin #{$key} {
      --tw-mask-radial-shape: #{$value};
    }
    x*/
  }
  
  @each $key, $value in $MaskRadialSize {
    /*x
    @mixin #{$key} {
      --tw-mask-radial-size: #{$value};
    }
    x*/
  }

  @each $key, $value in $MaskRadialPosition {
    /*x
    @mixin #{$key} {
      --tw-mask-radial-position: #{$value};
    }
    x*/
  }

  @each $key, $value in $MaskConic {
    /*x
    @mixin #{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-conic: conic-gradient(var(--tw-mask-conic-stops, var(--tw-mask-conic-position)));
      --tw-mask-conic-position: #{$value};
    }
    x*/
  }

  @each $key, $value in $MaskFromToSpacing {
    // linear
    /*x
    @mixin mask-linear-from-#{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear-stops: var(--tw-mask-linear-position), var(--tw-mask-linear-from-color) var(--tw-mask-linear-from-position), var(--tw-mask-linear-to-color) var(--tw-mask-linear-to-position);
      --tw-mask-linear: linear-gradient(var(--tw-mask-linear-stops));
      --tw-mask-linear-from-position: #{$value};
    }

    @mixin mask-linear-to-#{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear-stops: var(--tw-mask-linear-position), var(--tw-mask-linear-from-color) var(--tw-mask-linear-from-position), var(--tw-mask-linear-to-color) var(--tw-mask-linear-to-position);
      --tw-mask-linear: linear-gradient(var(--tw-mask-linear-stops));
      --tw-mask-linear-to-position: #{$value};
    }

    @mixin mask-t-from-#{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-top-from-position: #{$value};
    }

    @mixin mask-t-to-#{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-top-to-position: #{$value};
    }

    @mixin mask-r-from-#{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-right: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-right-from-position: #{$value};
    }

    @mixin mask-r-to-#{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-right: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-right-to-position: #{$value};
    }

    @mixin mask-b-from-#{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-bottom: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-bottom-from-position: #{$value};
    }

    @mixin mask-b-to-#{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-bottom: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-bottom-to-position: #{$value};
    }

    @mixin mask-l-from-#{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-left: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-left-from-position: #{$value};
    }

    @mixin mask-l-to-#{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-left: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-left-to-position: #{$value};
    }

    @mixin mask-y-from-#{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-top-from-position: #{$value};
      --tw-mask-bottom: linear-gradient(to bottom, var(--tw-mask-bottom-from-color) var(--tw-mask-bottom-from-position), var(--tw-mask-bottom-to-color) var(--tw-mask-bottom-to-position));
      --tw-mask-bottom-from-position: #{$value};
    }

    @mixin mask-y-to-#{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-top-to-position: #{$value};
      --tw-mask-bottom: linear-gradient(to bottom, var(--tw-mask-bottom-from-color) var(--tw-mask-bottom-from-position), var(--tw-mask-bottom-to-color) var(--tw-mask-bottom-to-position));
      --tw-mask-bottom-to-position: #{$value};
    }

    @mixin mask-x-from-#{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-right: linear-gradient(to right, var(--tw-mask-right-from-color) var(--tw-mask-right-from-position), var(--tw-mask-right-to-color) var(--tw-mask-right-to-position));
      --tw-mask-right-from-position: #{$value};
      --tw-mask-left: linear-gradient(to left, var(--tw-mask-left-from-color) var(--tw-mask-left-from-position), var(--tw-mask-left-to-color) var(--tw-mask-left-to-position));
      --tw-mask-left-from-position: #{$value};
    }

    @mixin mask-x-to-#{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-right: linear-gradient(to right, var(--tw-mask-right-from-color) var(--tw-mask-right-from-position), var(--tw-mask-right-to-color) var(--tw-mask-right-to-position));
      --tw-mask-right-to-position: #{$value};
      --tw-mask-left: linear-gradient(to left, var(--tw-mask-left-from-color) var(--tw-mask-left-from-position), var(--tw-mask-left-to-color) var(--tw-mask-left-to-position));
      --tw-mask-left-to-position: #{$value};
    }
    x*/

    // radial
    /*x
    @mixin mask-radial-from-#{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-radial-stops: var(--tw-mask-radial-shape) var(--tw-mask-radial-size) at var(--tw-mask-radial-position), var(--tw-mask-radial-from-color) var(--tw-mask-radial-from-position), var(--tw-mask-radial-to-color) var(--tw-mask-radial-to-position);
      --tw-mask-radial: radial-gradient(var(--tw-mask-radial-stops));
      --tw-mask-radial-from-position: #{$value};
    }

    @mixin mask-radial-to-#{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-radial-stops: var(--tw-mask-radial-shape) var(--tw-mask-radial-size) at var(--tw-mask-radial-position), var(--tw-mask-radial-from-color) var(--tw-mask-radial-from-position), var(--tw-mask-radial-to-color) var(--tw-mask-radial-to-position);
      --tw-mask-radial: radial-gradient(var(--tw-mask-radial-stops));
      --tw-mask-radial-to-position: #{$value};
    }
    x*/

    // conic
    /*x
    @mixin mask-conic-from-#{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-conic-stops: from var(--tw-mask-conic-position), var(--tw-mask-conic-from-color) var(--tw-mask-conic-from-position), var(--tw-mask-conic-to-color) var(--tw-mask-conic-to-position);
      --tw-mask-conic: conic-gradient(var(--tw-mask-conic-stops));
      --tw-mask-conic-from-position: #{$value};
    }

    @mixin mask-conic-to-#{$key} {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-conic-stops: from var(--tw-mask-conic-position), var(--tw-mask-conic-from-color) var(--tw-mask-conic-from-position), var(--tw-mask-conic-to-color) var(--tw-mask-conic-to-position);
      --tw-mask-conic: conic-gradient(var(--tw-mask-conic-stops));
      --tw-mask-conic-to-position: #{$value};
    }
    x*/
  }

  @each $key, $value in $MaskFromToColor {
    // linear
    /*x
    @mixin mask-linear-from-#{$key}($v: 1) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear-stops: var(--tw-mask-linear-position), var(--tw-mask-linear-from-color) var(--tw-mask-linear-from-position), var(--tw-mask-linear-to-color) var(--tw-mask-linear-to-position);
      --tw-mask-linear: linear-gradient(var(--tw-mask-linear-stops));
      --tw-mask-linear-from-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-linear-from-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
    }

    @mixin mask-linear-to-#{$key}($v: 1) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear-stops: var(--tw-mask-linear-position), var(--tw-mask-linear-from-color) var(--tw-mask-linear-from-position), var(--tw-mask-linear-to-color) var(--tw-mask-linear-to-position);
      --tw-mask-linear: linear-gradient(var(--tw-mask-linear-stops));
      --tw-mask-linear-to-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-linear-to-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
    }

    @mixin mask-t-from-#{$key}($v: 1) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-top-from-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-top-from-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
    }

    @mixin mask-t-to-#{$key}($v: 1) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-top-to-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-top-to-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
    }

    @mixin mask-r-from-#{$key}($v: 1) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-right-from-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-right-from-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
    }

    @mixin mask-r-to-#{$key}($v: 1) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-right-to-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-right-to-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
    }

    @mixin mask-b-from-#{$key}($v: 1) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-bottom-from-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-bottom-from-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
    }

    @mixin mask-b-to-#{$key}($v: 1) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-bottom-to-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-bottom-to-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
    }

    @mixin mask-l-from-#{$key}($v: 1) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-left-from-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-left-from-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
    }

    @mixin mask-l-to-#{$key}($v: 1) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-left-to-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-left-to-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
    }

    @mixin mask-y-from-#{$key}($v: 1) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-top-from-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-top-from-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
      --tw-mask-bottom: linear-gradient(to bottom, var(--tw-mask-bottom-from-color) var(--tw-mask-bottom-from-position), var(--tw-mask-bottom-to-color) var(--tw-mask-bottom-to-position));
      --tw-mask-bottom-from-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-bottom-from-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
    }

    @mixin mask-y-to-#{$key}($v: 1) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-top-to-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-top-to-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
      --tw-mask-bottom: linear-gradient(to bottom, var(--tw-mask-bottom-from-color) var(--tw-mask-bottom-from-position), var(--tw-mask-bottom-to-color) var(--tw-mask-bottom-to-position));
      --tw-mask-bottom-to-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-bottom-to-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
    }

    @mixin mask-x-from-#{$key}($v: 1) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-right: linear-gradient(to right, var(--tw-mask-right-from-color) var(--tw-mask-right-from-position), var(--tw-mask-right-to-color) var(--tw-mask-right-to-position));
      --tw-mask-right-from-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-right-from-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
      --tw-mask-left: linear-gradient(to left, var(--tw-mask-left-from-color) var(--tw-mask-left-from-position), var(--tw-mask-left-to-color) var(--tw-mask-left-to-position));
      --tw-mask-left-from-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-left-from-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
    }

    @mixin mask-x-to-#{$key}($v: 1) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-right: linear-gradient(to right, var(--tw-mask-right-from-color) var(--tw-mask-right-from-position), var(--tw-mask-right-to-color) var(--tw-mask-right-to-position));
      --tw-mask-right-to-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-right-to-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
      --tw-mask-left: linear-gradient(to left, var(--tw-mask-left-from-color) var(--tw-mask-left-from-position), var(--tw-mask-left-to-color) var(--tw-mask-left-to-position));
      --tw-mask-left-to-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-left-to-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
    }
    x*/

    // radial
    /*x
    @mixin mask-radial-from-#{$key}($v: 1) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-radial-stops: var(--tw-mask-radial-shape) var(--tw-mask-radial-size) at var(--tw-mask-radial-position), var(--tw-mask-radial-from-color) var(--tw-mask-radial-from-position), var(--tw-mask-radial-to-color) var(--tw-mask-radial-to-position);
      --tw-mask-radial: radial-gradient(var(--tw-mask-radial-stops));
      --tw-mask-radial-from-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-radial-from-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
    }

    @mixin mask-radial-to-#{$key}($v: 1) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-radial-stops: var(--tw-mask-radial-shape) var(--tw-mask-radial-size) at var(--tw-mask-radial-position), var(--tw-mask-radial-from-color) var(--tw-mask-radial-from-position), var(--tw-mask-radial-to-color) var(--tw-mask-radial-to-position);
      --tw-mask-radial: radial-gradient(var(--tw-mask-radial-stops));
      --tw-mask-radial-to-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-radial-to-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
    }
    x*/

    // conic
    /*x
    @mixin mask-conic-from-#{$key}($v: 1) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-conic-stops: from var(--tw-mask-conic-position), var(--tw-mask-conic-from-color) var(--tw-mask-conic-from-position), var(--tw-mask-conic-to-color) var(--tw-mask-conic-to-position);
      --tw-mask-conic: conic-gradient(var(--tw-mask-conic-stops));
      --tw-mask-conic-from-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-conic-from-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
    }

    @mixin mask-conic-to-#{$key}($v: 1) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-conic-stops: from var(--tw-mask-conic-position), var(--tw-mask-conic-from-color) var(--tw-mask-conic-from-position), var(--tw-mask-conic-to-color) var(--tw-mask-conic-to-position);
      --tw-mask-conic: conic-gradient(var(--tw-mask-conic-stops));
      --tw-mask-conic-to-color: color-mix(in srgb, #/*x{_c(#{$value}, $v)}, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-mask-conic-to-color: color-mix(in oklab, #/*x{_c(#{$value}, $v)}, transparent);
      }
    }
    x*/
  }
}

@if $UsingACustomValue {
  /*x
  @mixin mask-($v) {
    @if meta.type-of($v)==number {
      mask-position: $v;
    }

    @else {
      mask-image: $v;
    }
  }
  x*/

  // linear
  /*x
  @mixin mask-linear-($v) {
    mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
    mask-composite: intersect;
    --tw-mask-linear: linear-gradient(var(--tw-mask-linear-stops, var(--tw-mask-linear-position)));
    --tw-mask-linear-position: $;
  }

  @mixin mask-linear-from-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear-stops: var(--tw-mask-linear-position), var(--tw-mask-linear-from-color) var(--tw-mask-linear-from-position), var(--tw-mask-linear-to-color) var(--tw-mask-linear-to-position);
      --tw-mask-linear: linear-gradient(var(--tw-mask-linear-stops));
      --tw-mask-linear-from-color: $v;
    }

    @else {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear-stops: var(--tw-mask-linear-position), var(--tw-mask-linear-from-color) var(--tw-mask-linear-from-position), var(--tw-mask-linear-to-color) var(--tw-mask-linear-to-position);
      --tw-mask-linear: linear-gradient(var(--tw-mask-linear-stops));
      --tw-mask-linear-from-position: $v;
    }
  }

  @mixin mask-linear-to-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear-stops: var(--tw-mask-linear-position), var(--tw-mask-linear-from-color) var(--tw-mask-linear-from-position), var(--tw-mask-linear-to-color) var(--tw-mask-linear-to-position);
      --tw-mask-linear: linear-gradient(var(--tw-mask-linear-stops));
      --tw-mask-linear-to-color: $v;
    }

    @else {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear-stops: var(--tw-mask-linear-position), var(--tw-mask-linear-from-color) var(--tw-mask-linear-from-position), var(--tw-mask-linear-to-color) var(--tw-mask-linear-to-position);
      --tw-mask-linear: linear-gradient(var(--tw-mask-linear-stops));
      --tw-mask-linear-to-position: $v;
    }
  }

  @mixin mask-t-from-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-top-from-color: $v;
    }

    @else {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-top-from-position: $v;
    }
  }

  @mixin mask-t-to-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-top-to-color: $v;
    }

    @else {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-top-to-position: $v;
    }
  }

  @mixin mask-r-from-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-right: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-right-from-color: $v;
    }

    @else {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-right: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-right-from-position: $v;
    }
  }

  @mixin mask-r-to-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-right: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-right-to-color: $v;
    }

    @else {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-right: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-right-to-position: $v;
    }
  }

  @mixin mask-b-from-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-bottom: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-bottom-from-color: $v;
    }

    @else {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-bottom: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-bottom-from-position: $v;
    }
  }

  @mixin mask-b-to-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-bottom: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-bottom-to-color: $v;
    }

    @else {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-bottom: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-bottom-to-position: $v;
    }
  }

  @mixin mask-l-from-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-left: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-left-from-color: $v;
    }

    @else {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-left: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-left-from-position: $v;
    }
  }

  @mixin mask-l-to-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-left: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-left-to-color: $v;
    }

    @else {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-left: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-left-to-position: $v;
    }
  }

  @mixin mask-y-from-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-top-from-color: $v;
      --tw-mask-bottom: linear-gradient(to bottom, var(--tw-mask-bottom-from-color) var(--tw-mask-bottom-from-position), var(--tw-mask-bottom-to-color) var(--tw-mask-bottom-to-position));
      --tw-mask-bottom-from-color: $v;
    }

    @else {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-top-from-position: $v;
      --tw-mask-bottom: linear-gradient(to bottom, var(--tw-mask-bottom-from-color) var(--tw-mask-bottom-from-position), var(--tw-mask-bottom-to-color) var(--tw-mask-bottom-to-position));
      --tw-mask-bottom-from-position: $v;
    }
  }

  @mixin mask-y-to-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-top-to-color: $v;
      --tw-mask-bottom: linear-gradient(to bottom, var(--tw-mask-bottom-from-color) var(--tw-mask-bottom-from-position), var(--tw-mask-bottom-to-color) var(--tw-mask-bottom-to-position));
      --tw-mask-bottom-to-color: $v;
    }

    @else {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-top: linear-gradient(to top, var(--tw-mask-top-from-color) var(--tw-mask-top-from-position), var(--tw-mask-top-to-color) var(--tw-mask-top-to-position));
      --tw-mask-top-to-position: $v;
      --tw-mask-bottom: linear-gradient(to bottom, var(--tw-mask-bottom-from-color) var(--tw-mask-bottom-from-position), var(--tw-mask-bottom-to-color) var(--tw-mask-bottom-to-position));
      --tw-mask-bottom-to-position: $v;
    }
  }

  @mixin mask-x-from-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-right: linear-gradient(to right, var(--tw-mask-right-from-color) var(--tw-mask-right-from-position), var(--tw-mask-right-to-color) var(--tw-mask-right-to-position));
      --tw-mask-right-from-color: $v;
      --tw-mask-left: linear-gradient(to left, var(--tw-mask-left-from-color) var(--tw-mask-left-from-position), var(--tw-mask-left-to-color) var(--tw-mask-left-to-position));
      --tw-mask-left-from-color: $v;
    }

    @else {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-right: linear-gradient(to right, var(--tw-mask-right-from-color) var(--tw-mask-right-from-position), var(--tw-mask-right-to-color) var(--tw-mask-right-to-position));
      --tw-mask-right-from-position: $v;
      --tw-mask-left: linear-gradient(to left, var(--tw-mask-left-from-color) var(--tw-mask-left-from-position), var(--tw-mask-left-to-color) var(--tw-mask-left-to-position));
      --tw-mask-left-from-position: $v;
    }
  }

  @mixin mask-x-to-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-right: linear-gradient(to right, var(--tw-mask-right-from-color) var(--tw-mask-right-from-position), var(--tw-mask-right-to-color) var(--tw-mask-right-to-position));
      --tw-mask-right-to-color: $v;
      --tw-mask-left: linear-gradient(to left, var(--tw-mask-left-from-color) var(--tw-mask-left-from-position), var(--tw-mask-left-to-color) var(--tw-mask-left-to-position));
      --tw-mask-left-to-color: $v;
    }

    @else {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-linear: var(--tw-mask-left), var(--tw-mask-right), var(--tw-mask-bottom), var(--tw-mask-top);
      --tw-mask-right: linear-gradient(to right, var(--tw-mask-right-from-color) var(--tw-mask-right-from-position), var(--tw-mask-right-to-color) var(--tw-mask-right-to-position));
      --tw-mask-right-to-position: $v;
      --tw-mask-left: linear-gradient(to left, var(--tw-mask-left-from-color) var(--tw-mask-left-from-position), var(--tw-mask-left-to-color) var(--tw-mask-left-to-position));
      --tw-mask-left-to-position: $v;
    }
  }
  x*/

  // radial
  /*x
  @mixin mask-radial-($v) {
    mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
    mask-composite: intersect;
    --tw-mask-radial: radial-gradient(var(--tw-mask-radial-stops, var(--tw-mask-radial-size)));
    --tw-mask-radial-size: $v;
  }

  @mixin mask-radial-from-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-radial-stops: var(--tw-mask-radial-shape) var(--tw-mask-radial-size) at var(--tw-mask-radial-position), var(--tw-mask-radial-from-color) var(--tw-mask-radial-from-position), var(--tw-mask-radial-to-color) var(--tw-mask-radial-to-position);
      --tw-mask-radial: radial-gradient(var(--tw-mask-radial-stops));
      --tw-mask-radial-from-color: $v;
    }

    @else {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-radial-stops: var(--tw-mask-radial-shape) var(--tw-mask-radial-size) at var(--tw-mask-radial-position), var(--tw-mask-radial-from-color) var(--tw-mask-radial-from-position), var(--tw-mask-radial-to-color) var(--tw-mask-radial-to-position);
      --tw-mask-radial: radial-gradient(var(--tw-mask-radial-stops));
      --tw-mask-radial-from-position: $v;
    }
  }

  @mixin mask-radial-to-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-radial-stops: var(--tw-mask-radial-shape) var(--tw-mask-radial-size) at var(--tw-mask-radial-position), var(--tw-mask-radial-from-color) var(--tw-mask-radial-from-position), var(--tw-mask-radial-to-color) var(--tw-mask-radial-to-position);
      --tw-mask-radial: radial-gradient(var(--tw-mask-radial-stops));
      --tw-mask-radial-to-color: $v;
    }

    @else {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-radial-stops: var(--tw-mask-radial-shape) var(--tw-mask-radial-size) at var(--tw-mask-radial-position), var(--tw-mask-radial-from-color) var(--tw-mask-radial-from-position), var(--tw-mask-radial-to-color) var(--tw-mask-radial-to-position);
      --tw-mask-radial: radial-gradient(var(--tw-mask-radial-stops));
      --tw-mask-radial-to-position: $v;
    }
  }
  x*/

  // conic
  /*x
  @mixin mask-conic-($v) {
    mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
    mask-composite: intersect;
    --tw-mask-conic: conic-gradient(var(--tw-mask-conic-stops, var(--tw-mask-conic-position)));
    --tw-mask-conic-position: $v;
  }

  @mixin mask-conic-from-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-conic-stops: from var(--tw-mask-conic-position), var(--tw-mask-conic-from-color) var(--tw-mask-conic-from-position), var(--tw-mask-conic-to-color) var(--tw-mask-conic-to-position);
      --tw-mask-conic: conic-gradient(var(--tw-mask-conic-stops));
      --tw-mask-conic-from-color: $v;
    }

    @else {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-conic-stops: from var(--tw-mask-conic-position), var(--tw-mask-conic-from-color) var(--tw-mask-conic-from-position), var(--tw-mask-conic-to-color) var(--tw-mask-conic-to-position);
      --tw-mask-conic: conic-gradient(var(--tw-mask-conic-stops));
      --tw-mask-conic-from-position: $v;
    }
  }

  @mixin mask-conic-to-($v) {
    @if meta.type-of($v)==color or list.index(inherit currentColor transparent, $v) {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-conic-stops: from var(--tw-mask-conic-position), var(--tw-mask-conic-from-color) var(--tw-mask-conic-from-position), var(--tw-mask-conic-to-color) var(--tw-mask-conic-to-position);
      --tw-mask-conic: conic-gradient(var(--tw-mask-conic-stops));
      --tw-mask-conic-to-color: $v;
    }

    @else {
      mask-image: var(--tw-mask-linear), var(--tw-mask-radial), var(--tw-mask-conic);
      mask-composite: intersect;
      --tw-mask-conic-stops: from var(--tw-mask-conic-position), var(--tw-mask-conic-from-color) var(--tw-mask-conic-from-position), var(--tw-mask-conic-to-color) var(--tw-mask-conic-to-position);
      --tw-mask-conic: conic-gradient(var(--tw-mask-conic-stops));
      --tw-mask-conic-to-position: $v;
    }
  }
  x*/
}
