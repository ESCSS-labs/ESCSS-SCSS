@use "../setting" as *;

$SpaceBetween: (
  "0": "$spacing-0",
  "px": "$spacing-px",
  "0_5": "$spacing-0_5",
  "1": "$spacing-1",
  "1_5": "$spacing-1_5",
  "2": "$spacing-2",
  "2_5": "$spacing-2_5",
  "3": "$spacing-3",
  "3_5": "$spacing-3_5",
  "4": "$spacing-4",
  "5": "$spacing-5",
  "6": "$spacing-6",
  "7": "$spacing-7",
  "8": "$spacing-8",
  "9": "$spacing-9",
  "10": "$spacing-10",
  "11": "$spacing-11",
  "12": "$spacing-12",
  "14": "$spacing-14",
  "16": "$spacing-16",
  "20": "$spacing-20",
  "24": "$spacing-24",
  "28": "$spacing-28",
  "32": "$spacing-32",
  "36": "$spacing-36",
  "40": "$spacing-40",
  "44": "$spacing-44",
  "48": "$spacing-48",
  "52": "$spacing-52",
  "56": "$spacing-56",
  "60": "$spacing-60",
  "64": "$spacing-64",
  "72": "$spacing-72",
  "80": "$spacing-80",
  "96": "$spacing-96",
);

@if $isBasic {
  /*x
  @mixin space-x-reverse {
    $tw-space-x-reverse: 1 !global;

    > * ~ * {
      margin-left: $tw-dummy-space-x-value * (1 - $tw-space-x-reverse);
      margin-right: $tw-dummy-space-x-value * $tw-space-x-reverse;
    }
  }

  @mixin space-y-reverse {
    $tw-space-y-reverse: 1 !global;

    > * ~ * {
      margin-top: $tw-dummy-space-y-value * (1 - $tw-space-y-reverse);
      margin-bottom: $tw-dummy-space-y-value * $tw-space-y-reverse;
    }
  }
  x*/

  @each $key, $value in $SpaceBetween {
    /*x
    @mixin space-x-#{$key} {
      $tw-dummy-space-x-value: #{$value} !global;

      > * ~ * {
        margin-left: #{$value} * (1 - $tw-space-x-reverse);
        margin-right: #{$value} * $tw-space-x-reverse;
      }
    }

    @mixin space-y-#{$key} {
      $tw-dummy-space-y-value: #{$value} !global;

      > * ~ * {
        margin-top: #{$value} * (1 - $tw-space-y-reverse);
        margin-bottom: #{$value} * $tw-space-y-reverse;
      }
    }
    x*/
  }
}

@if $isArbitrary {
  /*x
  @mixin space-x-($v) {
    $tw-dummy-space-x-value: $v !global; // update value when using reverse

    > * ~ * {
      margin-left: $v * (1 - $tw-space-x-reverse);
      margin-right: $v * $tw-space-x-reverse;
    }
  }

  @mixin space-y-($v) {
    $tw-dummy-space-y-value: $v !global; // update value when using reverse

    > * ~ * {
      margin-top: $v * (1 - $tw-space-y-reverse);
      margin-bottom: $v * $tw-space-y-reverse;
    }
  }
  x*/
}

@if $isNegative {
  @if $isBasic {
    /*x
      @mixin \-space-x-reverse {
        $tw-space-x-reverse: 1 !global;
  
        > * ~ * {
          margin-left: -$tw-dummy-space-x-value * (1 - $tw-space-x-reverse);
          margin-right: -$tw-dummy-space-x-value * $tw-space-x-reverse;
        }
      }
  
      @mixin \-space-y-reverse {
        $tw-space-y-reverse: 1 !global;
  
        > * ~ * {
          margin-top: -$tw-dummy-space-y-value * (1 - $tw-space-y-reverse);
          margin-bottom: -$tw-dummy-space-y-value * $tw-space-y-reverse;
        }
      }
    x*/
    @each $key, $value in $SpaceBetween {
      /*x
      @mixin \-space-x-#{$key} {
        $tw-dummy-space-x-value: -#{$value} !global;
  
        > * ~ * {
          margin-left: -#{$value} * (1 - $tw-space-x-reverse);
          margin-right: -#{$value} * $tw-space-x-reverse;
        }
      }
  
      @mixin \-space-y-#{$key} {
        $tw-dummy-space-y-value: -#{$value} !global;
  
        > * ~ * {
          margin-top: -#{$value} * (1 - $tw-space-y-reverse);
          margin-bottom: -#{$value} * $tw-space-y-reverse;
        }
      }
      x*/
    }
  }

  @if $isArbitrary {
    /*x
    @mixin \-space-x-($v) {
      $tw-dummy-space-x-value: -$v !global; // update value when using reverse
  
      > * ~ * {
        margin-left: -$v * (1 - $tw-space-x-reverse);
        margin-right: -$v * $tw-space-x-reverse;
      }
    }
  
    @mixin \-space-y-($v) {
      $tw-dummy-space-y-value: -$v !global; // update value when using reverse
  
      > * ~ * {
        margin-top: -$v * (1 - $tw-space-y-reverse);
        margin-bottom: -$v * $tw-space-y-reverse;
      }
    }
    x*/
  }
}
