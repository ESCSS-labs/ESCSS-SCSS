@include describe('12.Transforms') {
  @include describe('Translate') {
    @include describe('Basic') {
      @include it('translate-x-0') {
        @include assert {
          @include output {
            @include translate-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-0') {
        @include assert {
          @include output {
            @include translate-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-px') {
        @include assert {
          @include output {
            @include translate-x-px;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(1px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-px') {
        @include assert {
          @include output {
            @include translate-y-px;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 1px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-0\.5') {
        @include assert {
          @include output {
            @include translate-x-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0.125rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-y-0\.5') {
        @include assert {
          @include output {
            @include translate-y-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0.125rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-x-1') {
        @include assert {
          @include output {
            @include translate-x-1;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-y-1') {
        @include assert {
          @include output {
            @include translate-y-1;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-x-1\.5') {
        @include assert {
          @include output {
            @include translate-x-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0.375rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-y-1\.5') {
        @include assert {
          @include output {
            @include translate-y-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0.375rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-x-2') {
        @include assert {
          @include output {
            @include translate-x-2;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-2') {
        @include assert {
          @include output {
            @include translate-y-2;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-2\.5') {
        @include assert {
          @include output {
            @include translate-x-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0.625rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-y-2\.5') {
        @include assert {
          @include output {
            @include translate-y-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0.625rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-x-3') {
        @include assert {
          @include output {
            @include translate-x-3;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-y-3') {
        @include assert {
          @include output {
            @include translate-y-3;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-x-3\.5') {
        @include assert {
          @include output {
            @include translate-x-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0.875rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-y-3\.5') {
        @include assert {
          @include output {
            @include translate-y-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0.875rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-x-4') {
        @include assert {
          @include output {
            @include translate-x-4;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(1rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-4') {
        @include assert {
          @include output {
            @include translate-y-4;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 1rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-5') {
        @include assert {
          @include output {
            @include translate-x-5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(1.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-y-5') {
        @include assert {
          @include output {
            @include translate-y-5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 1.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-x-6') {
        @include assert {
          @include output {
            @include translate-x-6;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(1.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-6') {
        @include assert {
          @include output {
            @include translate-y-6;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 1.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-7') {
        @include assert {
          @include output {
            @include translate-x-7;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(1.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-y-7') {
        @include assert {
          @include output {
            @include translate-y-7;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 1.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-x-8') {
        @include assert {
          @include output {
            @include translate-x-8;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(2rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-8') {
        @include assert {
          @include output {
            @include translate-y-8;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 2rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-9') {
        @include assert {
          @include output {
            @include translate-x-9;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(2.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-y-9') {
        @include assert {
          @include output {
            @include translate-y-9;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 2.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-x-10') {
        @include assert {
          @include output {
            @include translate-x-10;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(2.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-10') {
        @include assert {
          @include output {
            @include translate-y-10;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 2.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-11') {
        @include assert {
          @include output {
            @include translate-x-11;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(2.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-y-11') {
        @include assert {
          @include output {
            @include translate-y-11;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 2.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-x-12') {
        @include assert {
          @include output {
            @include translate-x-12;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(3rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-12') {
        @include assert {
          @include output {
            @include translate-y-12;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 3rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-14') {
        @include assert {
          @include output {
            @include translate-x-14;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(3.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-14') {
        @include assert {
          @include output {
            @include translate-y-14;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 3.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-16') {
        @include assert {
          @include output {
            @include translate-x-16;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(4rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-16') {
        @include assert {
          @include output {
            @include translate-y-16;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 4rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-20') {
        @include assert {
          @include output {
            @include translate-x-20;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-20') {
        @include assert {
          @include output {
            @include translate-y-20;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-24') {
        @include assert {
          @include output {
            @include translate-x-24;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(6rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-24') {
        @include assert {
          @include output {
            @include translate-y-24;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 6rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-28') {
        @include assert {
          @include output {
            @include translate-x-28;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(7rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-28') {
        @include assert {
          @include output {
            @include translate-y-28;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 7rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-32') {
        @include assert {
          @include output {
            @include translate-x-32;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(8rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-32') {
        @include assert {
          @include output {
            @include translate-y-32;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 8rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-36') {
        @include assert {
          @include output {
            @include translate-x-36;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(9rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-36') {
        @include assert {
          @include output {
            @include translate-y-36;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 9rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-40') {
        @include assert {
          @include output {
            @include translate-x-40;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(10rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-40') {
        @include assert {
          @include output {
            @include translate-y-40;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 10rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-44') {
        @include assert {
          @include output {
            @include translate-x-44;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(11rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-44') {
        @include assert {
          @include output {
            @include translate-y-44;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 11rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-48') {
        @include assert {
          @include output {
            @include translate-x-48;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(12rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-48') {
        @include assert {
          @include output {
            @include translate-y-48;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 12rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-52') {
        @include assert {
          @include output {
            @include translate-x-52;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(13rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-52') {
        @include assert {
          @include output {
            @include translate-y-52;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 13rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-56') {
        @include assert {
          @include output {
            @include translate-x-56;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(14rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-56') {
        @include assert {
          @include output {
            @include translate-y-56;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 14rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-60') {
        @include assert {
          @include output {
            @include translate-x-60;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(15rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-60') {
        @include assert {
          @include output {
            @include translate-y-60;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 15rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-64') {
        @include assert {
          @include output {
            @include translate-x-64;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(16rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-64') {
        @include assert {
          @include output {
            @include translate-y-64;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 16rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-72') {
        @include assert {
          @include output {
            @include translate-x-72;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(18rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-72') {
        @include assert {
          @include output {
            @include translate-y-72;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 18rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-80') {
        @include assert {
          @include output {
            @include translate-x-80;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(20rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-80') {
        @include assert {
          @include output {
            @include translate-y-80;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 20rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-96') {
        @include assert {
          @include output {
            @include translate-x-96;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(24rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-96') {
        @include assert {
          @include output {
            @include translate-y-96;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 24rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-1\/2') {
        @include assert {
          @include output {
            @include translate-x-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-1\/3') {
        @include assert {
          @include output {
            @include translate-x-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(33.333333%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-x-2\/3') {
        @include assert {
          @include output {
            @include translate-x-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(66.666667%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-x-1\/4') {
        @include assert {
          @include output {
            @include translate-x-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(25%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-2\/4') {
        @include assert {
          @include output {
            @include translate-x-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-3\/4') {
        @include assert {
          @include output {
            @include translate-x-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(75%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-x-full') {
        @include assert {
          @include output {
            @include translate-x-full;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(100%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-1\/2') {
        @include assert {
          @include output {
            @include translate-y-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-1\/3') {
        @include assert {
          @include output {
            @include translate-y-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 33.333333%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-y-2\/3') {
        @include assert {
          @include output {
            @include translate-y-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 66.666667%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('translate-y-1\/4') {
        @include assert {
          @include output {
            @include translate-y-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 25%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-2\/4') {
        @include assert {
          @include output {
            @include translate-y-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-3\/4') {
        @include assert {
          @include output {
            @include translate-y-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 75%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-full') {
        @include assert {
          @include output {
            @include translate-y-full;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 100%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-0') {
        @include assert {
          @include output {
            @include \-translate-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-0px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-0') {
        @include assert {
          @include output {
            @include \-translate-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -0px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-px') {
        @include assert {
          @include output {
            @include \-translate-x-px;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-1px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-px') {
        @include assert {
          @include output {
            @include \-translate-y-px;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -1px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-0\.5') {
        @include assert {
          @include output {
            @include \-translate-x-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-0.125rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-y-0\.5') {
        @include assert {
          @include output {
            @include \-translate-y-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -0.125rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-x-1') {
        @include assert {
          @include output {
            @include \-translate-x-1;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-0.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-y-1') {
        @include assert {
          @include output {
            @include \-translate-y-1;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -0.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-x-1\.5') {
        @include assert {
          @include output {
            @include \-translate-x-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-0.375rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-y-1\.5') {
        @include assert {
          @include output {
            @include \-translate-y-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -0.375rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-x-2') {
        @include assert {
          @include output {
            @include \-translate-x-2;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-0.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-y-2') {
        @include assert {
          @include output {
            @include \-translate-y-2;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -0.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-x-2\.5') {
        @include assert {
          @include output {
            @include \-translate-x-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-0.625rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-y-2\.5') {
        @include assert {
          @include output {
            @include \-translate-y-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -0.625rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-x-3') {
        @include assert {
          @include output {
            @include \-translate-x-3;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-0.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-y-3') {
        @include assert {
          @include output {
            @include \-translate-y-3;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -0.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-x-3\.5') {
        @include assert {
          @include output {
            @include \-translate-x-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-0.875rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-y-3\.5') {
        @include assert {
          @include output {
            @include \-translate-y-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -0.875rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-x-4') {
        @include assert {
          @include output {
            @include \-translate-x-4;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-1rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-4') {
        @include assert {
          @include output {
            @include \-translate-y-4;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -1rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-5') {
        @include assert {
          @include output {
            @include \-translate-x-5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-1.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-y-5') {
        @include assert {
          @include output {
            @include \-translate-y-5;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -1.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-x-6') {
        @include assert {
          @include output {
            @include \-translate-x-6;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-1.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-y-6') {
        @include assert {
          @include output {
            @include \-translate-y-6;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -1.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-x-7') {
        @include assert {
          @include output {
            @include \-translate-x-7;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-1.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-y-7') {
        @include assert {
          @include output {
            @include \-translate-y-7;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -1.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-x-8') {
        @include assert {
          @include output {
            @include \-translate-x-8;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-2rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-8') {
        @include assert {
          @include output {
            @include \-translate-y-8;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -2rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-9') {
        @include assert {
          @include output {
            @include \-translate-x-9;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-2.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-y-9') {
        @include assert {
          @include output {
            @include \-translate-y-9;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -2.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-x-10') {
        @include assert {
          @include output {
            @include \-translate-x-10;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-2.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-y-10') {
        @include assert {
          @include output {
            @include \-translate-y-10;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -2.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-x-11') {
        @include assert {
          @include output {
            @include \-translate-x-11;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-2.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-y-11') {
        @include assert {
          @include output {
            @include \-translate-y-11;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -2.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-x-12') {
        @include assert {
          @include output {
            @include \-translate-x-12;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-3rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-12') {
        @include assert {
          @include output {
            @include \-translate-y-12;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -3rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-14') {
        @include assert {
          @include output {
            @include \-translate-x-14;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-3.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-y-14') {
        @include assert {
          @include output {
            @include \-translate-y-14;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -3.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-x-16') {
        @include assert {
          @include output {
            @include \-translate-x-16;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-4rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-16') {
        @include assert {
          @include output {
            @include \-translate-y-16;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -4rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-20') {
        @include assert {
          @include output {
            @include \-translate-x-20;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-20') {
        @include assert {
          @include output {
            @include \-translate-y-20;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-24') {
        @include assert {
          @include output {
            @include \-translate-x-24;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-6rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-24') {
        @include assert {
          @include output {
            @include \-translate-y-24;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -6rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-28') {
        @include assert {
          @include output {
            @include \-translate-x-28;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-7rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-28') {
        @include assert {
          @include output {
            @include \-translate-y-28;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -7rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-32') {
        @include assert {
          @include output {
            @include \-translate-x-32;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-8rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-32') {
        @include assert {
          @include output {
            @include \-translate-y-32;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -8rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-36') {
        @include assert {
          @include output {
            @include \-translate-x-36;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-9rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-36') {
        @include assert {
          @include output {
            @include \-translate-y-36;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -9rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-40') {
        @include assert {
          @include output {
            @include \-translate-x-40;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-10rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-40') {
        @include assert {
          @include output {
            @include \-translate-y-40;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -10rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-44') {
        @include assert {
          @include output {
            @include \-translate-x-44;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-11rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-44') {
        @include assert {
          @include output {
            @include \-translate-y-44;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -11rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-48') {
        @include assert {
          @include output {
            @include \-translate-x-48;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-12rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-48') {
        @include assert {
          @include output {
            @include \-translate-y-48;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -12rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-52') {
        @include assert {
          @include output {
            @include \-translate-x-52;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-13rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-52') {
        @include assert {
          @include output {
            @include \-translate-y-52;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -13rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-56') {
        @include assert {
          @include output {
            @include \-translate-x-56;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-14rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-56') {
        @include assert {
          @include output {
            @include \-translate-y-56;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -14rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-60') {
        @include assert {
          @include output {
            @include \-translate-x-60;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-15rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-60') {
        @include assert {
          @include output {
            @include \-translate-y-60;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -15rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-64') {
        @include assert {
          @include output {
            @include \-translate-x-64;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-16rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-64') {
        @include assert {
          @include output {
            @include \-translate-y-64;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -16rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-72') {
        @include assert {
          @include output {
            @include \-translate-x-72;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-18rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-72') {
        @include assert {
          @include output {
            @include \-translate-y-72;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -18rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-80') {
        @include assert {
          @include output {
            @include \-translate-x-80;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-20rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-80') {
        @include assert {
          @include output {
            @include \-translate-y-80;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -20rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-96') {
        @include assert {
          @include output {
            @include \-translate-x-96;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-24rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-96') {
        @include assert {
          @include output {
            @include \-translate-y-96;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -24rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-1\/2') {
        @include assert {
          @include output {
            @include \-translate-x-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-1\/3') {
        @include assert {
          @include output {
            @include \-translate-x-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-33.333333%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-x-2\/3') {
        @include assert {
          @include output {
            @include \-translate-x-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-66.666667%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-x-1\/4') {
        @include assert {
          @include output {
            @include \-translate-x-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-25%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-2\/4') {
        @include assert {
          @include output {
            @include \-translate-x-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-3\/4') {
        @include assert {
          @include output {
            @include \-translate-x-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-75%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-full') {
        @include assert {
          @include output {
            @include \-translate-x-full;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-100%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-1\/2') {
        @include assert {
          @include output {
            @include \-translate-y-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-1\/3') {
        @include assert {
          @include output {
            @include \-translate-y-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -33.333333%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-y-2\/3') {
        @include assert {
          @include output {
            @include \-translate-y-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -66.666667%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
              scaleY(1);
          }
        }
      }

      @include it('-translate-y-1\/4') {
        @include assert {
          @include output {
            @include \-translate-y-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -25%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-2\/4') {
        @include assert {
          @include output {
            @include \-translate-y-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-3\/4') {
        @include assert {
          @include output {
            @include \-translate-y-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -75%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-full') {
        @include assert {
          @include output {
            @include \-translate-y-full;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -100%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }
    }

    @include describe('Rwd') {
      @include it('sm\:translate-x-0') {
        @include assert {
          @include output {
            @include sm\:translate-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-0') {
        @include assert {
          @include output {
            @include sm\:translate-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-px') {
        @include assert {
          @include output {
            @include sm\:translate-x-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(1px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-px') {
        @include assert {
          @include output {
            @include sm\:translate-y-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 1px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-0\.5') {
        @include assert {
          @include output {
            @include sm\:translate-x-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0.125rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-0\.5') {
        @include assert {
          @include output {
            @include sm\:translate-y-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0.125rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-1') {
        @include assert {
          @include output {
            @include sm\:translate-x-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-1') {
        @include assert {
          @include output {
            @include sm\:translate-y-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-1\.5') {
        @include assert {
          @include output {
            @include sm\:translate-x-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0.375rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-1\.5') {
        @include assert {
          @include output {
            @include sm\:translate-y-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0.375rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-2') {
        @include assert {
          @include output {
            @include sm\:translate-x-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-2') {
        @include assert {
          @include output {
            @include sm\:translate-y-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-2\.5') {
        @include assert {
          @include output {
            @include sm\:translate-x-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0.625rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-2\.5') {
        @include assert {
          @include output {
            @include sm\:translate-y-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0.625rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-3') {
        @include assert {
          @include output {
            @include sm\:translate-x-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-3') {
        @include assert {
          @include output {
            @include sm\:translate-y-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-3\.5') {
        @include assert {
          @include output {
            @include sm\:translate-x-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0.875rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-3\.5') {
        @include assert {
          @include output {
            @include sm\:translate-y-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0.875rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-4') {
        @include assert {
          @include output {
            @include sm\:translate-x-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(1rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-4') {
        @include assert {
          @include output {
            @include sm\:translate-y-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 1rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-5') {
        @include assert {
          @include output {
            @include sm\:translate-x-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(1.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-5') {
        @include assert {
          @include output {
            @include sm\:translate-y-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 1.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-6') {
        @include assert {
          @include output {
            @include sm\:translate-x-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(1.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-6') {
        @include assert {
          @include output {
            @include sm\:translate-y-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 1.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-7') {
        @include assert {
          @include output {
            @include sm\:translate-x-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(1.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-7') {
        @include assert {
          @include output {
            @include sm\:translate-y-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 1.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-8') {
        @include assert {
          @include output {
            @include sm\:translate-x-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(2rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-8') {
        @include assert {
          @include output {
            @include sm\:translate-y-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 2rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-9') {
        @include assert {
          @include output {
            @include sm\:translate-x-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(2.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-9') {
        @include assert {
          @include output {
            @include sm\:translate-y-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 2.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-10') {
        @include assert {
          @include output {
            @include sm\:translate-x-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(2.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-10') {
        @include assert {
          @include output {
            @include sm\:translate-y-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 2.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-11') {
        @include assert {
          @include output {
            @include sm\:translate-x-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(2.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-11') {
        @include assert {
          @include output {
            @include sm\:translate-y-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 2.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-12') {
        @include assert {
          @include output {
            @include sm\:translate-x-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(3rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-12') {
        @include assert {
          @include output {
            @include sm\:translate-y-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 3rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-14') {
        @include assert {
          @include output {
            @include sm\:translate-x-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(3.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-14') {
        @include assert {
          @include output {
            @include sm\:translate-y-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 3.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-16') {
        @include assert {
          @include output {
            @include sm\:translate-x-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(4rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-16') {
        @include assert {
          @include output {
            @include sm\:translate-y-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 4rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-20') {
        @include assert {
          @include output {
            @include sm\:translate-x-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-20') {
        @include assert {
          @include output {
            @include sm\:translate-y-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-24') {
        @include assert {
          @include output {
            @include sm\:translate-x-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(6rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-24') {
        @include assert {
          @include output {
            @include sm\:translate-y-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 6rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-28') {
        @include assert {
          @include output {
            @include sm\:translate-x-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(7rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-28') {
        @include assert {
          @include output {
            @include sm\:translate-y-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 7rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-32') {
        @include assert {
          @include output {
            @include sm\:translate-x-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(8rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-32') {
        @include assert {
          @include output {
            @include sm\:translate-y-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 8rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-36') {
        @include assert {
          @include output {
            @include sm\:translate-x-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(9rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-36') {
        @include assert {
          @include output {
            @include sm\:translate-y-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 9rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-40') {
        @include assert {
          @include output {
            @include sm\:translate-x-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(10rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-40') {
        @include assert {
          @include output {
            @include sm\:translate-y-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 10rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-44') {
        @include assert {
          @include output {
            @include sm\:translate-x-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(11rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-44') {
        @include assert {
          @include output {
            @include sm\:translate-y-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 11rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-48') {
        @include assert {
          @include output {
            @include sm\:translate-x-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(12rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-48') {
        @include assert {
          @include output {
            @include sm\:translate-y-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 12rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-52') {
        @include assert {
          @include output {
            @include sm\:translate-x-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(13rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-52') {
        @include assert {
          @include output {
            @include sm\:translate-y-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 13rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-56') {
        @include assert {
          @include output {
            @include sm\:translate-x-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(14rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-56') {
        @include assert {
          @include output {
            @include sm\:translate-y-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 14rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-60') {
        @include assert {
          @include output {
            @include sm\:translate-x-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(15rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-60') {
        @include assert {
          @include output {
            @include sm\:translate-y-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 15rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-64') {
        @include assert {
          @include output {
            @include sm\:translate-x-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(16rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-64') {
        @include assert {
          @include output {
            @include sm\:translate-y-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 16rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-72') {
        @include assert {
          @include output {
            @include sm\:translate-x-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(18rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-72') {
        @include assert {
          @include output {
            @include sm\:translate-y-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 18rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-80') {
        @include assert {
          @include output {
            @include sm\:translate-x-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(20rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-80') {
        @include assert {
          @include output {
            @include sm\:translate-y-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 20rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-96') {
        @include assert {
          @include output {
            @include sm\:translate-x-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(24rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-96') {
        @include assert {
          @include output {
            @include sm\:translate-y-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 24rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-1\/2') {
        @include assert {
          @include output {
            @include sm\:translate-x-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-1\/3') {
        @include assert {
          @include output {
            @include sm\:translate-x-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(33.333333%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-2\/3') {
        @include assert {
          @include output {
            @include sm\:translate-x-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(66.666667%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-1\/4') {
        @include assert {
          @include output {
            @include sm\:translate-x-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(25%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-2\/4') {
        @include assert {
          @include output {
            @include sm\:translate-x-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-3\/4') {
        @include assert {
          @include output {
            @include sm\:translate-x-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(75%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-x-full') {
        @include assert {
          @include output {
            @include sm\:translate-x-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(100%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-1\/2') {
        @include assert {
          @include output {
            @include sm\:translate-y-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-1\/3') {
        @include assert {
          @include output {
            @include sm\:translate-y-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 33.333333%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-2\/3') {
        @include assert {
          @include output {
            @include sm\:translate-y-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 66.666667%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-1\/4') {
        @include assert {
          @include output {
            @include sm\:translate-y-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 25%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-2\/4') {
        @include assert {
          @include output {
            @include sm\:translate-y-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-3\/4') {
        @include assert {
          @include output {
            @include sm\:translate-y-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 75%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-full') {
        @include assert {
          @include output {
            @include sm\:translate-y-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 100%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-0') {
        @include assert {
          @include output {
            @include sm\:-translate-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-0px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-0') {
        @include assert {
          @include output {
            @include sm\:-translate-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -0px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-px') {
        @include assert {
          @include output {
            @include sm\:-translate-x-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-1px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-px') {
        @include assert {
          @include output {
            @include sm\:-translate-y-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -1px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-0\.5') {
        @include assert {
          @include output {
            @include sm\:-translate-x-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-0.125rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-0\.5') {
        @include assert {
          @include output {
            @include sm\:-translate-y-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -0.125rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-1') {
        @include assert {
          @include output {
            @include sm\:-translate-x-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-0.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-1') {
        @include assert {
          @include output {
            @include sm\:-translate-y-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -0.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-1\.5') {
        @include assert {
          @include output {
            @include sm\:-translate-x-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-0.375rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-1\.5') {
        @include assert {
          @include output {
            @include sm\:-translate-y-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -0.375rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-2') {
        @include assert {
          @include output {
            @include sm\:-translate-x-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-0.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-2') {
        @include assert {
          @include output {
            @include sm\:-translate-y-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -0.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-2\.5') {
        @include assert {
          @include output {
            @include sm\:-translate-x-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-0.625rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-2\.5') {
        @include assert {
          @include output {
            @include sm\:-translate-y-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -0.625rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-3') {
        @include assert {
          @include output {
            @include sm\:-translate-x-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-0.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-3') {
        @include assert {
          @include output {
            @include sm\:-translate-y-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -0.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-3\.5') {
        @include assert {
          @include output {
            @include sm\:-translate-x-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-0.875rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-3\.5') {
        @include assert {
          @include output {
            @include sm\:-translate-y-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -0.875rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-4') {
        @include assert {
          @include output {
            @include sm\:-translate-x-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-1rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-4') {
        @include assert {
          @include output {
            @include sm\:-translate-y-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -1rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-5') {
        @include assert {
          @include output {
            @include sm\:-translate-x-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-1.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-5') {
        @include assert {
          @include output {
            @include sm\:-translate-y-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -1.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-6') {
        @include assert {
          @include output {
            @include sm\:-translate-x-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-1.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-6') {
        @include assert {
          @include output {
            @include sm\:-translate-y-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -1.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-7') {
        @include assert {
          @include output {
            @include sm\:-translate-x-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-1.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-7') {
        @include assert {
          @include output {
            @include sm\:-translate-y-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -1.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-8') {
        @include assert {
          @include output {
            @include sm\:-translate-x-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-2rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-8') {
        @include assert {
          @include output {
            @include sm\:-translate-y-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -2rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-9') {
        @include assert {
          @include output {
            @include sm\:-translate-x-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-2.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-9') {
        @include assert {
          @include output {
            @include sm\:-translate-y-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -2.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-10') {
        @include assert {
          @include output {
            @include sm\:-translate-x-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-2.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-10') {
        @include assert {
          @include output {
            @include sm\:-translate-y-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -2.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-11') {
        @include assert {
          @include output {
            @include sm\:-translate-x-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-2.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-11') {
        @include assert {
          @include output {
            @include sm\:-translate-y-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -2.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-12') {
        @include assert {
          @include output {
            @include sm\:-translate-x-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-3rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-12') {
        @include assert {
          @include output {
            @include sm\:-translate-y-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -3rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-14') {
        @include assert {
          @include output {
            @include sm\:-translate-x-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-3.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-14') {
        @include assert {
          @include output {
            @include sm\:-translate-y-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -3.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-16') {
        @include assert {
          @include output {
            @include sm\:-translate-x-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-4rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-16') {
        @include assert {
          @include output {
            @include sm\:-translate-y-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -4rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-20') {
        @include assert {
          @include output {
            @include sm\:-translate-x-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-20') {
        @include assert {
          @include output {
            @include sm\:-translate-y-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-24') {
        @include assert {
          @include output {
            @include sm\:-translate-x-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-6rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-24') {
        @include assert {
          @include output {
            @include sm\:-translate-y-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -6rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-28') {
        @include assert {
          @include output {
            @include sm\:-translate-x-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-7rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-28') {
        @include assert {
          @include output {
            @include sm\:-translate-y-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -7rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-32') {
        @include assert {
          @include output {
            @include sm\:-translate-x-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-8rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-32') {
        @include assert {
          @include output {
            @include sm\:-translate-y-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -8rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-36') {
        @include assert {
          @include output {
            @include sm\:-translate-x-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-9rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-36') {
        @include assert {
          @include output {
            @include sm\:-translate-y-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -9rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-40') {
        @include assert {
          @include output {
            @include sm\:-translate-x-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-10rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-40') {
        @include assert {
          @include output {
            @include sm\:-translate-y-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -10rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-44') {
        @include assert {
          @include output {
            @include sm\:-translate-x-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-11rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-44') {
        @include assert {
          @include output {
            @include sm\:-translate-y-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -11rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-48') {
        @include assert {
          @include output {
            @include sm\:-translate-x-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-12rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-48') {
        @include assert {
          @include output {
            @include sm\:-translate-y-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -12rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-52') {
        @include assert {
          @include output {
            @include sm\:-translate-x-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-13rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-52') {
        @include assert {
          @include output {
            @include sm\:-translate-y-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -13rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-56') {
        @include assert {
          @include output {
            @include sm\:-translate-x-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-14rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-56') {
        @include assert {
          @include output {
            @include sm\:-translate-y-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -14rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-60') {
        @include assert {
          @include output {
            @include sm\:-translate-x-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-15rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-60') {
        @include assert {
          @include output {
            @include sm\:-translate-y-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -15rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-64') {
        @include assert {
          @include output {
            @include sm\:-translate-x-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-16rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-64') {
        @include assert {
          @include output {
            @include sm\:-translate-y-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -16rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-72') {
        @include assert {
          @include output {
            @include sm\:-translate-x-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-18rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-72') {
        @include assert {
          @include output {
            @include sm\:-translate-y-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -18rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-80') {
        @include assert {
          @include output {
            @include sm\:-translate-x-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-20rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-80') {
        @include assert {
          @include output {
            @include sm\:-translate-y-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -20rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-96') {
        @include assert {
          @include output {
            @include sm\:-translate-x-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-24rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-96') {
        @include assert {
          @include output {
            @include sm\:-translate-y-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -24rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-1\/2') {
        @include assert {
          @include output {
            @include sm\:-translate-x-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-1\/3') {
        @include assert {
          @include output {
            @include sm\:-translate-x-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-33.333333%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-2\/3') {
        @include assert {
          @include output {
            @include sm\:-translate-x-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-66.666667%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-1\/4') {
        @include assert {
          @include output {
            @include sm\:-translate-x-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-25%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-2\/4') {
        @include assert {
          @include output {
            @include sm\:-translate-x-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-3\/4') {
        @include assert {
          @include output {
            @include sm\:-translate-x-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-75%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-full') {
        @include assert {
          @include output {
            @include sm\:-translate-x-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-100%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-1\/2') {
        @include assert {
          @include output {
            @include sm\:-translate-y-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-1\/3') {
        @include assert {
          @include output {
            @include sm\:-translate-y-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -33.333333%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-2\/3') {
        @include assert {
          @include output {
            @include sm\:-translate-y-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -66.666667%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-1\/4') {
        @include assert {
          @include output {
            @include sm\:-translate-y-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -25%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-2\/4') {
        @include assert {
          @include output {
            @include sm\:-translate-y-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-3\/4') {
        @include assert {
          @include output {
            @include sm\:-translate-y-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -75%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-full') {
        @include assert {
          @include output {
            @include sm\:-translate-y-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -100%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-0') {
        @include assert {
          @include output {
            @include md\:translate-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-0') {
        @include assert {
          @include output {
            @include md\:translate-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-px') {
        @include assert {
          @include output {
            @include md\:translate-x-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(1px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-px') {
        @include assert {
          @include output {
            @include md\:translate-y-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 1px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-0\.5') {
        @include assert {
          @include output {
            @include md\:translate-x-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0.125rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-0\.5') {
        @include assert {
          @include output {
            @include md\:translate-y-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0.125rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-1') {
        @include assert {
          @include output {
            @include md\:translate-x-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-1') {
        @include assert {
          @include output {
            @include md\:translate-y-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-1\.5') {
        @include assert {
          @include output {
            @include md\:translate-x-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0.375rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-1\.5') {
        @include assert {
          @include output {
            @include md\:translate-y-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0.375rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-2') {
        @include assert {
          @include output {
            @include md\:translate-x-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-2') {
        @include assert {
          @include output {
            @include md\:translate-y-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-2\.5') {
        @include assert {
          @include output {
            @include md\:translate-x-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0.625rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-2\.5') {
        @include assert {
          @include output {
            @include md\:translate-y-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0.625rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-3') {
        @include assert {
          @include output {
            @include md\:translate-x-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-3') {
        @include assert {
          @include output {
            @include md\:translate-y-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-3\.5') {
        @include assert {
          @include output {
            @include md\:translate-x-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0.875rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-3\.5') {
        @include assert {
          @include output {
            @include md\:translate-y-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0.875rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-4') {
        @include assert {
          @include output {
            @include md\:translate-x-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(1rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-4') {
        @include assert {
          @include output {
            @include md\:translate-y-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 1rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-5') {
        @include assert {
          @include output {
            @include md\:translate-x-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(1.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-5') {
        @include assert {
          @include output {
            @include md\:translate-y-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 1.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-6') {
        @include assert {
          @include output {
            @include md\:translate-x-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(1.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-6') {
        @include assert {
          @include output {
            @include md\:translate-y-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 1.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-7') {
        @include assert {
          @include output {
            @include md\:translate-x-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(1.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-7') {
        @include assert {
          @include output {
            @include md\:translate-y-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 1.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-8') {
        @include assert {
          @include output {
            @include md\:translate-x-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(2rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-8') {
        @include assert {
          @include output {
            @include md\:translate-y-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 2rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-9') {
        @include assert {
          @include output {
            @include md\:translate-x-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(2.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-9') {
        @include assert {
          @include output {
            @include md\:translate-y-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 2.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-10') {
        @include assert {
          @include output {
            @include md\:translate-x-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(2.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-10') {
        @include assert {
          @include output {
            @include md\:translate-y-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 2.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-11') {
        @include assert {
          @include output {
            @include md\:translate-x-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(2.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-11') {
        @include assert {
          @include output {
            @include md\:translate-y-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 2.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-12') {
        @include assert {
          @include output {
            @include md\:translate-x-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(3rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-12') {
        @include assert {
          @include output {
            @include md\:translate-y-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 3rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-14') {
        @include assert {
          @include output {
            @include md\:translate-x-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(3.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-14') {
        @include assert {
          @include output {
            @include md\:translate-y-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 3.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-16') {
        @include assert {
          @include output {
            @include md\:translate-x-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(4rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-16') {
        @include assert {
          @include output {
            @include md\:translate-y-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 4rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-20') {
        @include assert {
          @include output {
            @include md\:translate-x-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-20') {
        @include assert {
          @include output {
            @include md\:translate-y-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-24') {
        @include assert {
          @include output {
            @include md\:translate-x-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(6rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-24') {
        @include assert {
          @include output {
            @include md\:translate-y-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 6rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-28') {
        @include assert {
          @include output {
            @include md\:translate-x-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(7rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-28') {
        @include assert {
          @include output {
            @include md\:translate-y-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 7rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-32') {
        @include assert {
          @include output {
            @include md\:translate-x-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(8rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-32') {
        @include assert {
          @include output {
            @include md\:translate-y-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 8rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-36') {
        @include assert {
          @include output {
            @include md\:translate-x-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(9rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-36') {
        @include assert {
          @include output {
            @include md\:translate-y-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 9rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-40') {
        @include assert {
          @include output {
            @include md\:translate-x-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(10rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-40') {
        @include assert {
          @include output {
            @include md\:translate-y-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 10rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-44') {
        @include assert {
          @include output {
            @include md\:translate-x-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(11rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-44') {
        @include assert {
          @include output {
            @include md\:translate-y-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 11rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-48') {
        @include assert {
          @include output {
            @include md\:translate-x-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(12rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-48') {
        @include assert {
          @include output {
            @include md\:translate-y-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 12rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-52') {
        @include assert {
          @include output {
            @include md\:translate-x-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(13rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-52') {
        @include assert {
          @include output {
            @include md\:translate-y-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 13rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-56') {
        @include assert {
          @include output {
            @include md\:translate-x-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(14rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-56') {
        @include assert {
          @include output {
            @include md\:translate-y-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 14rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-60') {
        @include assert {
          @include output {
            @include md\:translate-x-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(15rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-60') {
        @include assert {
          @include output {
            @include md\:translate-y-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 15rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-64') {
        @include assert {
          @include output {
            @include md\:translate-x-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(16rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-64') {
        @include assert {
          @include output {
            @include md\:translate-y-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 16rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-72') {
        @include assert {
          @include output {
            @include md\:translate-x-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(18rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-72') {
        @include assert {
          @include output {
            @include md\:translate-y-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 18rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-80') {
        @include assert {
          @include output {
            @include md\:translate-x-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(20rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-80') {
        @include assert {
          @include output {
            @include md\:translate-y-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 20rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-96') {
        @include assert {
          @include output {
            @include md\:translate-x-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(24rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-96') {
        @include assert {
          @include output {
            @include md\:translate-y-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 24rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-1\/2') {
        @include assert {
          @include output {
            @include md\:translate-x-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-1\/3') {
        @include assert {
          @include output {
            @include md\:translate-x-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(33.333333%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-2\/3') {
        @include assert {
          @include output {
            @include md\:translate-x-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(66.666667%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-1\/4') {
        @include assert {
          @include output {
            @include md\:translate-x-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(25%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-2\/4') {
        @include assert {
          @include output {
            @include md\:translate-x-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-3\/4') {
        @include assert {
          @include output {
            @include md\:translate-x-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(75%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-full') {
        @include assert {
          @include output {
            @include md\:translate-x-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(100%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-1\/2') {
        @include assert {
          @include output {
            @include md\:translate-y-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-1\/3') {
        @include assert {
          @include output {
            @include md\:translate-y-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 33.333333%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-2\/3') {
        @include assert {
          @include output {
            @include md\:translate-y-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 66.666667%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-1\/4') {
        @include assert {
          @include output {
            @include md\:translate-y-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 25%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-2\/4') {
        @include assert {
          @include output {
            @include md\:translate-y-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-3\/4') {
        @include assert {
          @include output {
            @include md\:translate-y-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 75%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-full') {
        @include assert {
          @include output {
            @include md\:translate-y-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 100%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-0') {
        @include assert {
          @include output {
            @include md\:-translate-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-0px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-0') {
        @include assert {
          @include output {
            @include md\:-translate-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -0px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-px') {
        @include assert {
          @include output {
            @include md\:-translate-x-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-1px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-px') {
        @include assert {
          @include output {
            @include md\:-translate-y-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -1px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-0\.5') {
        @include assert {
          @include output {
            @include md\:-translate-x-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-0.125rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-0\.5') {
        @include assert {
          @include output {
            @include md\:-translate-y-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -0.125rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-1') {
        @include assert {
          @include output {
            @include md\:-translate-x-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-0.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-1') {
        @include assert {
          @include output {
            @include md\:-translate-y-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -0.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-1\.5') {
        @include assert {
          @include output {
            @include md\:-translate-x-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-0.375rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-1\.5') {
        @include assert {
          @include output {
            @include md\:-translate-y-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -0.375rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-2') {
        @include assert {
          @include output {
            @include md\:-translate-x-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-0.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-2') {
        @include assert {
          @include output {
            @include md\:-translate-y-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -0.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-2\.5') {
        @include assert {
          @include output {
            @include md\:-translate-x-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-0.625rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-2\.5') {
        @include assert {
          @include output {
            @include md\:-translate-y-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -0.625rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-3') {
        @include assert {
          @include output {
            @include md\:-translate-x-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-0.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-3') {
        @include assert {
          @include output {
            @include md\:-translate-y-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -0.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-3\.5') {
        @include assert {
          @include output {
            @include md\:-translate-x-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-0.875rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-3\.5') {
        @include assert {
          @include output {
            @include md\:-translate-y-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -0.875rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-4') {
        @include assert {
          @include output {
            @include md\:-translate-x-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-1rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-4') {
        @include assert {
          @include output {
            @include md\:-translate-y-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -1rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-5') {
        @include assert {
          @include output {
            @include md\:-translate-x-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-1.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-5') {
        @include assert {
          @include output {
            @include md\:-translate-y-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -1.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-6') {
        @include assert {
          @include output {
            @include md\:-translate-x-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-1.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-6') {
        @include assert {
          @include output {
            @include md\:-translate-y-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -1.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-7') {
        @include assert {
          @include output {
            @include md\:-translate-x-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-1.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-7') {
        @include assert {
          @include output {
            @include md\:-translate-y-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -1.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-8') {
        @include assert {
          @include output {
            @include md\:-translate-x-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-2rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-8') {
        @include assert {
          @include output {
            @include md\:-translate-y-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -2rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-9') {
        @include assert {
          @include output {
            @include md\:-translate-x-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-2.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-9') {
        @include assert {
          @include output {
            @include md\:-translate-y-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -2.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-10') {
        @include assert {
          @include output {
            @include md\:-translate-x-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-2.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-10') {
        @include assert {
          @include output {
            @include md\:-translate-y-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -2.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-11') {
        @include assert {
          @include output {
            @include md\:-translate-x-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-2.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-11') {
        @include assert {
          @include output {
            @include md\:-translate-y-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -2.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-12') {
        @include assert {
          @include output {
            @include md\:-translate-x-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-3rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-12') {
        @include assert {
          @include output {
            @include md\:-translate-y-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -3rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-14') {
        @include assert {
          @include output {
            @include md\:-translate-x-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-3.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-14') {
        @include assert {
          @include output {
            @include md\:-translate-y-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -3.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-16') {
        @include assert {
          @include output {
            @include md\:-translate-x-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-4rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-16') {
        @include assert {
          @include output {
            @include md\:-translate-y-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -4rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-20') {
        @include assert {
          @include output {
            @include md\:-translate-x-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-20') {
        @include assert {
          @include output {
            @include md\:-translate-y-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-24') {
        @include assert {
          @include output {
            @include md\:-translate-x-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-6rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-24') {
        @include assert {
          @include output {
            @include md\:-translate-y-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -6rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-28') {
        @include assert {
          @include output {
            @include md\:-translate-x-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-7rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-28') {
        @include assert {
          @include output {
            @include md\:-translate-y-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -7rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-32') {
        @include assert {
          @include output {
            @include md\:-translate-x-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-8rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-32') {
        @include assert {
          @include output {
            @include md\:-translate-y-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -8rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-36') {
        @include assert {
          @include output {
            @include md\:-translate-x-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-9rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-36') {
        @include assert {
          @include output {
            @include md\:-translate-y-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -9rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-40') {
        @include assert {
          @include output {
            @include md\:-translate-x-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-10rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-40') {
        @include assert {
          @include output {
            @include md\:-translate-y-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -10rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-44') {
        @include assert {
          @include output {
            @include md\:-translate-x-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-11rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-44') {
        @include assert {
          @include output {
            @include md\:-translate-y-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -11rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-48') {
        @include assert {
          @include output {
            @include md\:-translate-x-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-12rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-48') {
        @include assert {
          @include output {
            @include md\:-translate-y-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -12rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-52') {
        @include assert {
          @include output {
            @include md\:-translate-x-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-13rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-52') {
        @include assert {
          @include output {
            @include md\:-translate-y-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -13rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-56') {
        @include assert {
          @include output {
            @include md\:-translate-x-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-14rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-56') {
        @include assert {
          @include output {
            @include md\:-translate-y-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -14rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-60') {
        @include assert {
          @include output {
            @include md\:-translate-x-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-15rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-60') {
        @include assert {
          @include output {
            @include md\:-translate-y-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -15rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-64') {
        @include assert {
          @include output {
            @include md\:-translate-x-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-16rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-64') {
        @include assert {
          @include output {
            @include md\:-translate-y-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -16rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-72') {
        @include assert {
          @include output {
            @include md\:-translate-x-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-18rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-72') {
        @include assert {
          @include output {
            @include md\:-translate-y-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -18rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-80') {
        @include assert {
          @include output {
            @include md\:-translate-x-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-20rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-80') {
        @include assert {
          @include output {
            @include md\:-translate-y-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -20rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-96') {
        @include assert {
          @include output {
            @include md\:-translate-x-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-24rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-96') {
        @include assert {
          @include output {
            @include md\:-translate-y-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -24rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-1\/2') {
        @include assert {
          @include output {
            @include md\:-translate-x-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-1\/3') {
        @include assert {
          @include output {
            @include md\:-translate-x-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-33.333333%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-2\/3') {
        @include assert {
          @include output {
            @include md\:-translate-x-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-66.666667%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-1\/4') {
        @include assert {
          @include output {
            @include md\:-translate-x-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-25%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-2\/4') {
        @include assert {
          @include output {
            @include md\:-translate-x-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-3\/4') {
        @include assert {
          @include output {
            @include md\:-translate-x-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-75%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-full') {
        @include assert {
          @include output {
            @include md\:-translate-x-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-100%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-1\/2') {
        @include assert {
          @include output {
            @include md\:-translate-y-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-1\/3') {
        @include assert {
          @include output {
            @include md\:-translate-y-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -33.333333%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-2\/3') {
        @include assert {
          @include output {
            @include md\:-translate-y-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -66.666667%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-1\/4') {
        @include assert {
          @include output {
            @include md\:-translate-y-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -25%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-2\/4') {
        @include assert {
          @include output {
            @include md\:-translate-y-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-3\/4') {
        @include assert {
          @include output {
            @include md\:-translate-y-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -75%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-full') {
        @include assert {
          @include output {
            @include md\:-translate-y-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -100%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-0') {
        @include assert {
          @include output {
            @include lg\:translate-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-0') {
        @include assert {
          @include output {
            @include lg\:translate-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-px') {
        @include assert {
          @include output {
            @include lg\:translate-x-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(1px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-px') {
        @include assert {
          @include output {
            @include lg\:translate-y-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 1px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-0\.5') {
        @include assert {
          @include output {
            @include lg\:translate-x-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0.125rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-0\.5') {
        @include assert {
          @include output {
            @include lg\:translate-y-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0.125rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-1') {
        @include assert {
          @include output {
            @include lg\:translate-x-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-1') {
        @include assert {
          @include output {
            @include lg\:translate-y-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-1\.5') {
        @include assert {
          @include output {
            @include lg\:translate-x-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0.375rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-1\.5') {
        @include assert {
          @include output {
            @include lg\:translate-y-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0.375rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-2') {
        @include assert {
          @include output {
            @include lg\:translate-x-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-2') {
        @include assert {
          @include output {
            @include lg\:translate-y-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-2\.5') {
        @include assert {
          @include output {
            @include lg\:translate-x-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0.625rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-2\.5') {
        @include assert {
          @include output {
            @include lg\:translate-y-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0.625rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-3') {
        @include assert {
          @include output {
            @include lg\:translate-x-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-3') {
        @include assert {
          @include output {
            @include lg\:translate-y-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-3\.5') {
        @include assert {
          @include output {
            @include lg\:translate-x-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0.875rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-3\.5') {
        @include assert {
          @include output {
            @include lg\:translate-y-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0.875rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-4') {
        @include assert {
          @include output {
            @include lg\:translate-x-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(1rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-4') {
        @include assert {
          @include output {
            @include lg\:translate-y-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 1rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-5') {
        @include assert {
          @include output {
            @include lg\:translate-x-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(1.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-5') {
        @include assert {
          @include output {
            @include lg\:translate-y-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 1.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-6') {
        @include assert {
          @include output {
            @include lg\:translate-x-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(1.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-6') {
        @include assert {
          @include output {
            @include lg\:translate-y-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 1.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-7') {
        @include assert {
          @include output {
            @include lg\:translate-x-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(1.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-7') {
        @include assert {
          @include output {
            @include lg\:translate-y-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 1.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-8') {
        @include assert {
          @include output {
            @include lg\:translate-x-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(2rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-8') {
        @include assert {
          @include output {
            @include lg\:translate-y-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 2rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-9') {
        @include assert {
          @include output {
            @include lg\:translate-x-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(2.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-9') {
        @include assert {
          @include output {
            @include lg\:translate-y-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 2.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-10') {
        @include assert {
          @include output {
            @include lg\:translate-x-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(2.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-10') {
        @include assert {
          @include output {
            @include lg\:translate-y-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 2.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-11') {
        @include assert {
          @include output {
            @include lg\:translate-x-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(2.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-11') {
        @include assert {
          @include output {
            @include lg\:translate-y-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 2.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-12') {
        @include assert {
          @include output {
            @include lg\:translate-x-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(3rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-12') {
        @include assert {
          @include output {
            @include lg\:translate-y-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 3rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-14') {
        @include assert {
          @include output {
            @include lg\:translate-x-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(3.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-14') {
        @include assert {
          @include output {
            @include lg\:translate-y-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 3.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-16') {
        @include assert {
          @include output {
            @include lg\:translate-x-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(4rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-16') {
        @include assert {
          @include output {
            @include lg\:translate-y-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 4rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-20') {
        @include assert {
          @include output {
            @include lg\:translate-x-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-20') {
        @include assert {
          @include output {
            @include lg\:translate-y-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-24') {
        @include assert {
          @include output {
            @include lg\:translate-x-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(6rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-24') {
        @include assert {
          @include output {
            @include lg\:translate-y-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 6rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-28') {
        @include assert {
          @include output {
            @include lg\:translate-x-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(7rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-28') {
        @include assert {
          @include output {
            @include lg\:translate-y-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 7rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-32') {
        @include assert {
          @include output {
            @include lg\:translate-x-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(8rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-32') {
        @include assert {
          @include output {
            @include lg\:translate-y-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 8rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-36') {
        @include assert {
          @include output {
            @include lg\:translate-x-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(9rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-36') {
        @include assert {
          @include output {
            @include lg\:translate-y-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 9rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-40') {
        @include assert {
          @include output {
            @include lg\:translate-x-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(10rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-40') {
        @include assert {
          @include output {
            @include lg\:translate-y-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 10rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-44') {
        @include assert {
          @include output {
            @include lg\:translate-x-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(11rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-44') {
        @include assert {
          @include output {
            @include lg\:translate-y-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 11rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-48') {
        @include assert {
          @include output {
            @include lg\:translate-x-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(12rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-48') {
        @include assert {
          @include output {
            @include lg\:translate-y-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 12rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-52') {
        @include assert {
          @include output {
            @include lg\:translate-x-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(13rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-52') {
        @include assert {
          @include output {
            @include lg\:translate-y-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 13rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-56') {
        @include assert {
          @include output {
            @include lg\:translate-x-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(14rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-56') {
        @include assert {
          @include output {
            @include lg\:translate-y-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 14rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-60') {
        @include assert {
          @include output {
            @include lg\:translate-x-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(15rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-60') {
        @include assert {
          @include output {
            @include lg\:translate-y-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 15rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-64') {
        @include assert {
          @include output {
            @include lg\:translate-x-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(16rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-64') {
        @include assert {
          @include output {
            @include lg\:translate-y-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 16rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-72') {
        @include assert {
          @include output {
            @include lg\:translate-x-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(18rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-72') {
        @include assert {
          @include output {
            @include lg\:translate-y-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 18rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-80') {
        @include assert {
          @include output {
            @include lg\:translate-x-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(20rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-80') {
        @include assert {
          @include output {
            @include lg\:translate-y-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 20rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-96') {
        @include assert {
          @include output {
            @include lg\:translate-x-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(24rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-96') {
        @include assert {
          @include output {
            @include lg\:translate-y-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 24rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-1\/2') {
        @include assert {
          @include output {
            @include lg\:translate-x-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-1\/3') {
        @include assert {
          @include output {
            @include lg\:translate-x-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(33.333333%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-2\/3') {
        @include assert {
          @include output {
            @include lg\:translate-x-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(66.666667%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-1\/4') {
        @include assert {
          @include output {
            @include lg\:translate-x-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(25%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-2\/4') {
        @include assert {
          @include output {
            @include lg\:translate-x-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-3\/4') {
        @include assert {
          @include output {
            @include lg\:translate-x-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(75%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-full') {
        @include assert {
          @include output {
            @include lg\:translate-x-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(100%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-1\/2') {
        @include assert {
          @include output {
            @include lg\:translate-y-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-1\/3') {
        @include assert {
          @include output {
            @include lg\:translate-y-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 33.333333%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-2\/3') {
        @include assert {
          @include output {
            @include lg\:translate-y-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 66.666667%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-1\/4') {
        @include assert {
          @include output {
            @include lg\:translate-y-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 25%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-2\/4') {
        @include assert {
          @include output {
            @include lg\:translate-y-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-3\/4') {
        @include assert {
          @include output {
            @include lg\:translate-y-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 75%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-full') {
        @include assert {
          @include output {
            @include lg\:translate-y-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 100%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-0') {
        @include assert {
          @include output {
            @include lg\:-translate-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-0px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-0') {
        @include assert {
          @include output {
            @include lg\:-translate-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -0px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-px') {
        @include assert {
          @include output {
            @include lg\:-translate-x-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-1px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-px') {
        @include assert {
          @include output {
            @include lg\:-translate-y-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -1px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-0\.5') {
        @include assert {
          @include output {
            @include lg\:-translate-x-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-0.125rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-0\.5') {
        @include assert {
          @include output {
            @include lg\:-translate-y-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -0.125rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-1') {
        @include assert {
          @include output {
            @include lg\:-translate-x-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-0.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-1') {
        @include assert {
          @include output {
            @include lg\:-translate-y-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -0.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-1\.5') {
        @include assert {
          @include output {
            @include lg\:-translate-x-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-0.375rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-1\.5') {
        @include assert {
          @include output {
            @include lg\:-translate-y-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -0.375rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-2') {
        @include assert {
          @include output {
            @include lg\:-translate-x-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-0.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-2') {
        @include assert {
          @include output {
            @include lg\:-translate-y-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -0.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-2\.5') {
        @include assert {
          @include output {
            @include lg\:-translate-x-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-0.625rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-2\.5') {
        @include assert {
          @include output {
            @include lg\:-translate-y-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -0.625rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-3') {
        @include assert {
          @include output {
            @include lg\:-translate-x-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-0.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-3') {
        @include assert {
          @include output {
            @include lg\:-translate-y-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -0.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-3\.5') {
        @include assert {
          @include output {
            @include lg\:-translate-x-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-0.875rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-3\.5') {
        @include assert {
          @include output {
            @include lg\:-translate-y-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -0.875rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-4') {
        @include assert {
          @include output {
            @include lg\:-translate-x-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-1rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-4') {
        @include assert {
          @include output {
            @include lg\:-translate-y-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -1rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-5') {
        @include assert {
          @include output {
            @include lg\:-translate-x-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-1.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-5') {
        @include assert {
          @include output {
            @include lg\:-translate-y-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -1.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-6') {
        @include assert {
          @include output {
            @include lg\:-translate-x-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-1.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-6') {
        @include assert {
          @include output {
            @include lg\:-translate-y-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -1.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-7') {
        @include assert {
          @include output {
            @include lg\:-translate-x-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-1.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-7') {
        @include assert {
          @include output {
            @include lg\:-translate-y-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -1.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-8') {
        @include assert {
          @include output {
            @include lg\:-translate-x-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-2rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-8') {
        @include assert {
          @include output {
            @include lg\:-translate-y-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -2rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-9') {
        @include assert {
          @include output {
            @include lg\:-translate-x-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-2.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-9') {
        @include assert {
          @include output {
            @include lg\:-translate-y-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -2.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-10') {
        @include assert {
          @include output {
            @include lg\:-translate-x-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-2.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-10') {
        @include assert {
          @include output {
            @include lg\:-translate-y-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -2.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-11') {
        @include assert {
          @include output {
            @include lg\:-translate-x-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-2.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-11') {
        @include assert {
          @include output {
            @include lg\:-translate-y-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -2.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-12') {
        @include assert {
          @include output {
            @include lg\:-translate-x-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-3rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-12') {
        @include assert {
          @include output {
            @include lg\:-translate-y-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -3rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-14') {
        @include assert {
          @include output {
            @include lg\:-translate-x-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-3.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-14') {
        @include assert {
          @include output {
            @include lg\:-translate-y-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -3.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-16') {
        @include assert {
          @include output {
            @include lg\:-translate-x-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-4rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-16') {
        @include assert {
          @include output {
            @include lg\:-translate-y-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -4rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-20') {
        @include assert {
          @include output {
            @include lg\:-translate-x-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-20') {
        @include assert {
          @include output {
            @include lg\:-translate-y-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-24') {
        @include assert {
          @include output {
            @include lg\:-translate-x-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-6rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-24') {
        @include assert {
          @include output {
            @include lg\:-translate-y-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -6rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-28') {
        @include assert {
          @include output {
            @include lg\:-translate-x-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-7rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-28') {
        @include assert {
          @include output {
            @include lg\:-translate-y-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -7rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-32') {
        @include assert {
          @include output {
            @include lg\:-translate-x-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-8rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-32') {
        @include assert {
          @include output {
            @include lg\:-translate-y-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -8rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-36') {
        @include assert {
          @include output {
            @include lg\:-translate-x-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-9rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-36') {
        @include assert {
          @include output {
            @include lg\:-translate-y-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -9rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-40') {
        @include assert {
          @include output {
            @include lg\:-translate-x-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-10rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-40') {
        @include assert {
          @include output {
            @include lg\:-translate-y-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -10rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-44') {
        @include assert {
          @include output {
            @include lg\:-translate-x-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-11rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-44') {
        @include assert {
          @include output {
            @include lg\:-translate-y-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -11rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-48') {
        @include assert {
          @include output {
            @include lg\:-translate-x-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-12rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-48') {
        @include assert {
          @include output {
            @include lg\:-translate-y-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -12rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-52') {
        @include assert {
          @include output {
            @include lg\:-translate-x-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-13rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-52') {
        @include assert {
          @include output {
            @include lg\:-translate-y-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -13rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-56') {
        @include assert {
          @include output {
            @include lg\:-translate-x-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-14rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-56') {
        @include assert {
          @include output {
            @include lg\:-translate-y-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -14rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-60') {
        @include assert {
          @include output {
            @include lg\:-translate-x-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-15rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-60') {
        @include assert {
          @include output {
            @include lg\:-translate-y-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -15rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-64') {
        @include assert {
          @include output {
            @include lg\:-translate-x-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-16rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-64') {
        @include assert {
          @include output {
            @include lg\:-translate-y-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -16rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-72') {
        @include assert {
          @include output {
            @include lg\:-translate-x-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-18rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-72') {
        @include assert {
          @include output {
            @include lg\:-translate-y-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -18rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-80') {
        @include assert {
          @include output {
            @include lg\:-translate-x-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-20rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-80') {
        @include assert {
          @include output {
            @include lg\:-translate-y-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -20rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-96') {
        @include assert {
          @include output {
            @include lg\:-translate-x-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-24rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-96') {
        @include assert {
          @include output {
            @include lg\:-translate-y-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -24rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-1\/2') {
        @include assert {
          @include output {
            @include lg\:-translate-x-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-1\/3') {
        @include assert {
          @include output {
            @include lg\:-translate-x-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-33.333333%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-2\/3') {
        @include assert {
          @include output {
            @include lg\:-translate-x-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-66.666667%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-1\/4') {
        @include assert {
          @include output {
            @include lg\:-translate-x-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-25%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-2\/4') {
        @include assert {
          @include output {
            @include lg\:-translate-x-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-3\/4') {
        @include assert {
          @include output {
            @include lg\:-translate-x-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-75%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-full') {
        @include assert {
          @include output {
            @include lg\:-translate-x-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-100%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-1\/2') {
        @include assert {
          @include output {
            @include lg\:-translate-y-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-1\/3') {
        @include assert {
          @include output {
            @include lg\:-translate-y-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -33.333333%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-2\/3') {
        @include assert {
          @include output {
            @include lg\:-translate-y-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -66.666667%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-1\/4') {
        @include assert {
          @include output {
            @include lg\:-translate-y-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -25%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-2\/4') {
        @include assert {
          @include output {
            @include lg\:-translate-y-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-3\/4') {
        @include assert {
          @include output {
            @include lg\:-translate-y-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -75%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-full') {
        @include assert {
          @include output {
            @include lg\:-translate-y-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -100%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-0') {
        @include assert {
          @include output {
            @include xl\:translate-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-0') {
        @include assert {
          @include output {
            @include xl\:translate-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-px') {
        @include assert {
          @include output {
            @include xl\:translate-x-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(1px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-px') {
        @include assert {
          @include output {
            @include xl\:translate-y-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 1px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-0\.5') {
        @include assert {
          @include output {
            @include xl\:translate-x-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0.125rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-0\.5') {
        @include assert {
          @include output {
            @include xl\:translate-y-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0.125rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-1') {
        @include assert {
          @include output {
            @include xl\:translate-x-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-1') {
        @include assert {
          @include output {
            @include xl\:translate-y-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-1\.5') {
        @include assert {
          @include output {
            @include xl\:translate-x-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0.375rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-1\.5') {
        @include assert {
          @include output {
            @include xl\:translate-y-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0.375rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-2') {
        @include assert {
          @include output {
            @include xl\:translate-x-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-2') {
        @include assert {
          @include output {
            @include xl\:translate-y-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-2\.5') {
        @include assert {
          @include output {
            @include xl\:translate-x-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0.625rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-2\.5') {
        @include assert {
          @include output {
            @include xl\:translate-y-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0.625rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-3') {
        @include assert {
          @include output {
            @include xl\:translate-x-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-3') {
        @include assert {
          @include output {
            @include xl\:translate-y-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-3\.5') {
        @include assert {
          @include output {
            @include xl\:translate-x-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0.875rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-3\.5') {
        @include assert {
          @include output {
            @include xl\:translate-y-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0.875rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-4') {
        @include assert {
          @include output {
            @include xl\:translate-x-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(1rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-4') {
        @include assert {
          @include output {
            @include xl\:translate-y-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 1rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-5') {
        @include assert {
          @include output {
            @include xl\:translate-x-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(1.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-5') {
        @include assert {
          @include output {
            @include xl\:translate-y-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 1.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-6') {
        @include assert {
          @include output {
            @include xl\:translate-x-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(1.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-6') {
        @include assert {
          @include output {
            @include xl\:translate-y-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 1.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-7') {
        @include assert {
          @include output {
            @include xl\:translate-x-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(1.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-7') {
        @include assert {
          @include output {
            @include xl\:translate-y-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 1.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-8') {
        @include assert {
          @include output {
            @include xl\:translate-x-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(2rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-8') {
        @include assert {
          @include output {
            @include xl\:translate-y-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 2rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-9') {
        @include assert {
          @include output {
            @include xl\:translate-x-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(2.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-9') {
        @include assert {
          @include output {
            @include xl\:translate-y-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 2.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-10') {
        @include assert {
          @include output {
            @include xl\:translate-x-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(2.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-10') {
        @include assert {
          @include output {
            @include xl\:translate-y-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 2.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-11') {
        @include assert {
          @include output {
            @include xl\:translate-x-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(2.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-11') {
        @include assert {
          @include output {
            @include xl\:translate-y-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 2.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-12') {
        @include assert {
          @include output {
            @include xl\:translate-x-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(3rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-12') {
        @include assert {
          @include output {
            @include xl\:translate-y-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 3rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-14') {
        @include assert {
          @include output {
            @include xl\:translate-x-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(3.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-14') {
        @include assert {
          @include output {
            @include xl\:translate-y-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 3.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-16') {
        @include assert {
          @include output {
            @include xl\:translate-x-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(4rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-16') {
        @include assert {
          @include output {
            @include xl\:translate-y-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 4rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-20') {
        @include assert {
          @include output {
            @include xl\:translate-x-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-20') {
        @include assert {
          @include output {
            @include xl\:translate-y-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-24') {
        @include assert {
          @include output {
            @include xl\:translate-x-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(6rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-24') {
        @include assert {
          @include output {
            @include xl\:translate-y-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 6rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-28') {
        @include assert {
          @include output {
            @include xl\:translate-x-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(7rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-28') {
        @include assert {
          @include output {
            @include xl\:translate-y-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 7rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-32') {
        @include assert {
          @include output {
            @include xl\:translate-x-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(8rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-32') {
        @include assert {
          @include output {
            @include xl\:translate-y-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 8rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-36') {
        @include assert {
          @include output {
            @include xl\:translate-x-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(9rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-36') {
        @include assert {
          @include output {
            @include xl\:translate-y-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 9rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-40') {
        @include assert {
          @include output {
            @include xl\:translate-x-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(10rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-40') {
        @include assert {
          @include output {
            @include xl\:translate-y-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 10rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-44') {
        @include assert {
          @include output {
            @include xl\:translate-x-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(11rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-44') {
        @include assert {
          @include output {
            @include xl\:translate-y-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 11rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-48') {
        @include assert {
          @include output {
            @include xl\:translate-x-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(12rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-48') {
        @include assert {
          @include output {
            @include xl\:translate-y-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 12rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-52') {
        @include assert {
          @include output {
            @include xl\:translate-x-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(13rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-52') {
        @include assert {
          @include output {
            @include xl\:translate-y-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 13rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-56') {
        @include assert {
          @include output {
            @include xl\:translate-x-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(14rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-56') {
        @include assert {
          @include output {
            @include xl\:translate-y-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 14rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-60') {
        @include assert {
          @include output {
            @include xl\:translate-x-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(15rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-60') {
        @include assert {
          @include output {
            @include xl\:translate-y-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 15rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-64') {
        @include assert {
          @include output {
            @include xl\:translate-x-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(16rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-64') {
        @include assert {
          @include output {
            @include xl\:translate-y-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 16rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-72') {
        @include assert {
          @include output {
            @include xl\:translate-x-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(18rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-72') {
        @include assert {
          @include output {
            @include xl\:translate-y-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 18rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-80') {
        @include assert {
          @include output {
            @include xl\:translate-x-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(20rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-80') {
        @include assert {
          @include output {
            @include xl\:translate-y-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 20rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-96') {
        @include assert {
          @include output {
            @include xl\:translate-x-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(24rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-96') {
        @include assert {
          @include output {
            @include xl\:translate-y-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 24rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-1\/2') {
        @include assert {
          @include output {
            @include xl\:translate-x-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-1\/3') {
        @include assert {
          @include output {
            @include xl\:translate-x-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(33.333333%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-2\/3') {
        @include assert {
          @include output {
            @include xl\:translate-x-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(66.666667%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-1\/4') {
        @include assert {
          @include output {
            @include xl\:translate-x-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(25%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-2\/4') {
        @include assert {
          @include output {
            @include xl\:translate-x-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-3\/4') {
        @include assert {
          @include output {
            @include xl\:translate-x-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(75%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-full') {
        @include assert {
          @include output {
            @include xl\:translate-x-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(100%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-1\/2') {
        @include assert {
          @include output {
            @include xl\:translate-y-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-1\/3') {
        @include assert {
          @include output {
            @include xl\:translate-y-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 33.333333%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-2\/3') {
        @include assert {
          @include output {
            @include xl\:translate-y-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 66.666667%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-1\/4') {
        @include assert {
          @include output {
            @include xl\:translate-y-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 25%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-2\/4') {
        @include assert {
          @include output {
            @include xl\:translate-y-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-3\/4') {
        @include assert {
          @include output {
            @include xl\:translate-y-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 75%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-full') {
        @include assert {
          @include output {
            @include xl\:translate-y-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 100%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-0') {
        @include assert {
          @include output {
            @include xl\:-translate-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-0px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-0') {
        @include assert {
          @include output {
            @include xl\:-translate-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -0px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-px') {
        @include assert {
          @include output {
            @include xl\:-translate-x-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-1px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-px') {
        @include assert {
          @include output {
            @include xl\:-translate-y-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -1px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-0\.5') {
        @include assert {
          @include output {
            @include xl\:-translate-x-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-0.125rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-0\.5') {
        @include assert {
          @include output {
            @include xl\:-translate-y-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -0.125rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-1') {
        @include assert {
          @include output {
            @include xl\:-translate-x-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-0.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-1') {
        @include assert {
          @include output {
            @include xl\:-translate-y-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -0.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-1\.5') {
        @include assert {
          @include output {
            @include xl\:-translate-x-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-0.375rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-1\.5') {
        @include assert {
          @include output {
            @include xl\:-translate-y-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -0.375rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-2') {
        @include assert {
          @include output {
            @include xl\:-translate-x-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-0.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-2') {
        @include assert {
          @include output {
            @include xl\:-translate-y-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -0.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-2\.5') {
        @include assert {
          @include output {
            @include xl\:-translate-x-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-0.625rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-2\.5') {
        @include assert {
          @include output {
            @include xl\:-translate-y-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -0.625rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-3') {
        @include assert {
          @include output {
            @include xl\:-translate-x-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-0.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-3') {
        @include assert {
          @include output {
            @include xl\:-translate-y-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -0.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-3\.5') {
        @include assert {
          @include output {
            @include xl\:-translate-x-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-0.875rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-3\.5') {
        @include assert {
          @include output {
            @include xl\:-translate-y-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -0.875rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-4') {
        @include assert {
          @include output {
            @include xl\:-translate-x-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-1rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-4') {
        @include assert {
          @include output {
            @include xl\:-translate-y-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -1rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-5') {
        @include assert {
          @include output {
            @include xl\:-translate-x-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-1.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-5') {
        @include assert {
          @include output {
            @include xl\:-translate-y-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -1.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-6') {
        @include assert {
          @include output {
            @include xl\:-translate-x-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-1.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-6') {
        @include assert {
          @include output {
            @include xl\:-translate-y-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -1.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-7') {
        @include assert {
          @include output {
            @include xl\:-translate-x-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-1.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-7') {
        @include assert {
          @include output {
            @include xl\:-translate-y-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -1.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-8') {
        @include assert {
          @include output {
            @include xl\:-translate-x-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-2rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-8') {
        @include assert {
          @include output {
            @include xl\:-translate-y-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -2rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-9') {
        @include assert {
          @include output {
            @include xl\:-translate-x-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-2.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-9') {
        @include assert {
          @include output {
            @include xl\:-translate-y-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -2.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-10') {
        @include assert {
          @include output {
            @include xl\:-translate-x-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-2.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-10') {
        @include assert {
          @include output {
            @include xl\:-translate-y-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -2.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-11') {
        @include assert {
          @include output {
            @include xl\:-translate-x-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-2.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-11') {
        @include assert {
          @include output {
            @include xl\:-translate-y-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -2.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-12') {
        @include assert {
          @include output {
            @include xl\:-translate-x-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-3rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-12') {
        @include assert {
          @include output {
            @include xl\:-translate-y-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -3rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-14') {
        @include assert {
          @include output {
            @include xl\:-translate-x-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-3.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-14') {
        @include assert {
          @include output {
            @include xl\:-translate-y-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -3.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-16') {
        @include assert {
          @include output {
            @include xl\:-translate-x-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-4rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-16') {
        @include assert {
          @include output {
            @include xl\:-translate-y-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -4rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-20') {
        @include assert {
          @include output {
            @include xl\:-translate-x-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-20') {
        @include assert {
          @include output {
            @include xl\:-translate-y-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-24') {
        @include assert {
          @include output {
            @include xl\:-translate-x-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-6rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-24') {
        @include assert {
          @include output {
            @include xl\:-translate-y-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -6rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-28') {
        @include assert {
          @include output {
            @include xl\:-translate-x-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-7rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-28') {
        @include assert {
          @include output {
            @include xl\:-translate-y-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -7rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-32') {
        @include assert {
          @include output {
            @include xl\:-translate-x-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-8rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-32') {
        @include assert {
          @include output {
            @include xl\:-translate-y-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -8rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-36') {
        @include assert {
          @include output {
            @include xl\:-translate-x-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-9rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-36') {
        @include assert {
          @include output {
            @include xl\:-translate-y-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -9rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-40') {
        @include assert {
          @include output {
            @include xl\:-translate-x-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-10rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-40') {
        @include assert {
          @include output {
            @include xl\:-translate-y-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -10rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-44') {
        @include assert {
          @include output {
            @include xl\:-translate-x-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-11rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-44') {
        @include assert {
          @include output {
            @include xl\:-translate-y-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -11rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-48') {
        @include assert {
          @include output {
            @include xl\:-translate-x-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-12rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-48') {
        @include assert {
          @include output {
            @include xl\:-translate-y-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -12rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-52') {
        @include assert {
          @include output {
            @include xl\:-translate-x-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-13rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-52') {
        @include assert {
          @include output {
            @include xl\:-translate-y-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -13rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-56') {
        @include assert {
          @include output {
            @include xl\:-translate-x-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-14rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-56') {
        @include assert {
          @include output {
            @include xl\:-translate-y-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -14rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-60') {
        @include assert {
          @include output {
            @include xl\:-translate-x-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-15rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-60') {
        @include assert {
          @include output {
            @include xl\:-translate-y-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -15rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-64') {
        @include assert {
          @include output {
            @include xl\:-translate-x-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-16rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-64') {
        @include assert {
          @include output {
            @include xl\:-translate-y-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -16rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-72') {
        @include assert {
          @include output {
            @include xl\:-translate-x-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-18rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-72') {
        @include assert {
          @include output {
            @include xl\:-translate-y-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -18rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-80') {
        @include assert {
          @include output {
            @include xl\:-translate-x-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-20rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-80') {
        @include assert {
          @include output {
            @include xl\:-translate-y-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -20rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-96') {
        @include assert {
          @include output {
            @include xl\:-translate-x-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-24rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-96') {
        @include assert {
          @include output {
            @include xl\:-translate-y-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -24rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-1\/2') {
        @include assert {
          @include output {
            @include xl\:-translate-x-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-1\/3') {
        @include assert {
          @include output {
            @include xl\:-translate-x-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-33.333333%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-2\/3') {
        @include assert {
          @include output {
            @include xl\:-translate-x-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-66.666667%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-1\/4') {
        @include assert {
          @include output {
            @include xl\:-translate-x-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-25%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-2\/4') {
        @include assert {
          @include output {
            @include xl\:-translate-x-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-3\/4') {
        @include assert {
          @include output {
            @include xl\:-translate-x-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-75%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-full') {
        @include assert {
          @include output {
            @include xl\:-translate-x-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-100%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-1\/2') {
        @include assert {
          @include output {
            @include xl\:-translate-y-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-1\/3') {
        @include assert {
          @include output {
            @include xl\:-translate-y-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -33.333333%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-2\/3') {
        @include assert {
          @include output {
            @include xl\:-translate-y-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -66.666667%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-1\/4') {
        @include assert {
          @include output {
            @include xl\:-translate-y-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -25%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-2\/4') {
        @include assert {
          @include output {
            @include xl\:-translate-y-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-3\/4') {
        @include assert {
          @include output {
            @include xl\:-translate-y-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -75%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-full') {
        @include assert {
          @include output {
            @include xl\:-translate-y-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -100%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-0') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-0') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-px') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(1px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-px') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 1px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-0\.5') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0.125rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-0\.5') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0.125rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-1') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-1') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-1\.5') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0.375rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-1\.5') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0.375rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-2') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-2') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-2\.5') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0.625rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-2\.5') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0.625rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-3') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-3') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-3\.5') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0.875rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-3\.5') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0.875rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-4') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(1rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-4') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 1rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-5') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(1.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-5') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 1.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-6') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(1.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-6') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 1.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-7') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(1.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-7') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 1.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-8') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(2rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-8') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 2rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-9') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(2.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-9') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 2.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-10') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(2.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-10') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 2.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-11') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(2.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-11') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 2.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-12') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(3rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-12') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 3rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-14') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(3.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-14') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 3.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-16') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(4rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-16') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 4rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-20') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-20') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-24') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(6rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-24') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 6rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-28') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(7rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-28') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 7rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-32') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(8rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-32') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 8rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-36') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(9rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-36') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 9rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-40') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(10rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-40') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 10rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-44') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(11rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-44') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 11rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-48') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(12rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-48') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 12rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-52') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(13rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-52') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 13rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-56') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(14rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-56') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 14rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-60') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(15rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-60') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 15rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-64') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(16rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-64') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 16rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-72') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(18rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-72') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 18rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-80') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(20rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-80') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 20rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-96') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(24rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-96') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 24rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-1\/2') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-1\/3') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(33.333333%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-2\/3') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(66.666667%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-1\/4') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(25%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-2\/4') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-3\/4') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(75%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-full') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(100%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-1\/2') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-1\/3') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 33.333333%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-2\/3') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 66.666667%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-1\/4') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 25%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-2\/4') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-3\/4') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 75%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-full') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 100%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-0') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-0px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-0') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -0px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-px') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-1px, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-px') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-px;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -1px) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-0\.5') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-0.125rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-0\.5') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-0\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -0.125rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-1') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-0.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-1') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-1;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -0.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-1\.5') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-0.375rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-1\.5') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-1\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -0.375rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-2') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-0.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-2') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -0.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-2\.5') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-0.625rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-2\.5') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-2\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -0.625rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-3') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-0.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-3') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -0.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-3\.5') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-0.875rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-3\.5') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-3\.5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -0.875rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-4') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-1rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-4') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -1rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-5') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-1.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-5') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-5;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -1.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-6') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-1.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-6') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-6;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -1.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-7') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-1.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-7') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-7;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -1.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-8') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-2rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-8') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-8;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -2rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-9') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-2.25rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-9') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-9;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -2.25rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-10') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-2.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-10') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-10;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -2.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-11') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-2.75rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-11') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-11;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -2.75rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-12') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-3rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-12') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-12;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -3rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-14') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-3.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-14') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-14;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -3.5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-16') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-4rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-16') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-16;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -4rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-20') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-20') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-20;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -5rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-24') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-6rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-24') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-24;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -6rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-28') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-7rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-28') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-28;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -7rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-32') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-8rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-32') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-32;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -8rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-36') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-9rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-36') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-36;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -9rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-40') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-10rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-40') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-40;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -10rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-44') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-11rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-44') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-44;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -11rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-48') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-12rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-48') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-48;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -12rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-52') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-13rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-52') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-52;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -13rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-56') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-14rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-56') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-56;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -14rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-60') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-15rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-60') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -15rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-64') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-16rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-64') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-64;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -16rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-72') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-18rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-72') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-72;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -18rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-80') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-20rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-80') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-80;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -20rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-96') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-24rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-96') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-96;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -24rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-1\/2') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-1\/3') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-33.333333%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-2\/3') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-66.666667%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-1\/4') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-25%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-2\/4') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-3\/4') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-75%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-full') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-100%, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-1\/2') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-1\/2;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-1\/3') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-1\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -33.333333%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-2\/3') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-2\/3;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -66.666667%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-1\/4') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-1\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -25%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-2\/4') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-2\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-3\/4') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-3\/4;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -75%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-full') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-full;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -100%) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }
    }

    @include describe('Custom') {
      @include it('translate-x-(17rem)') {
        @include assert {
          @include output {
            @include translate-x-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(17rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('translate-y-(17rem)') {
        @include assert {
          @include output {
            @include translate-y-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 17rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-x-(17rem)') {
        @include assert {
          @include output {
            @include \-translate-x-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(-17rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('-translate-y-(17rem)') {
        @include assert {
          @include output {
            @include \-translate-y-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, -17rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('sm\:translate-x-(17rem)') {
        @include assert {
          @include output {
            @include sm\:translate-x-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(17rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:translate-y-(17rem)') {
        @include assert {
          @include output {
            @include sm\:translate-y-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 17rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-x-(17rem)') {
        @include assert {
          @include output {
            @include sm\:-translate-x-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(-17rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-translate-y-(17rem)') {
        @include assert {
          @include output {
            @include sm\:-translate-y-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, -17rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-x-(17rem)') {
        @include assert {
          @include output {
            @include md\:translate-x-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(17rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:translate-y-(17rem)') {
        @include assert {
          @include output {
            @include md\:translate-y-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 17rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-x-(17rem)') {
        @include assert {
          @include output {
            @include md\:-translate-x-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(-17rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-translate-y-(17rem)') {
        @include assert {
          @include output {
            @include md\:-translate-y-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, -17rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-x-(17rem)') {
        @include assert {
          @include output {
            @include lg\:translate-x-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(17rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:translate-y-(17rem)') {
        @include assert {
          @include output {
            @include lg\:translate-y-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 17rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-x-(17rem)') {
        @include assert {
          @include output {
            @include lg\:-translate-x-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(-17rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-translate-y-(17rem)') {
        @include assert {
          @include output {
            @include lg\:-translate-y-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, -17rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-x-(17rem)') {
        @include assert {
          @include output {
            @include xl\:translate-x-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(17rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:translate-y-(17rem)') {
        @include assert {
          @include output {
            @include xl\:translate-y-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 17rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-x-(17rem)') {
        @include assert {
          @include output {
            @include xl\:-translate-x-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(-17rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-translate-y-(17rem)') {
        @include assert {
          @include output {
            @include xl\:-translate-y-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, -17rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-x-(17rem)') {
        @include assert {
          @include output {
            @include \2xl\:translate-x-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(17rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:translate-y-(17rem)') {
        @include assert {
          @include output {
            @include \2xl\:translate-y-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 17rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-x-(17rem)') {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(-17rem, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-translate-y-(17rem)') {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-(17rem);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, -17rem) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(1);
            }
          }
        }
      }
    }
  }
}
