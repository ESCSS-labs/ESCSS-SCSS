@include describe('12.Transforms') {
  @include describe('Scale') {
    @include describe('Basic') {
      @include it('scale-0') {
        @include assert {
          @include output {
            @include scale-0;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(0);
          }
        }
      }

      @include it('scale-x-0') {
        @include assert {
          @include output {
            @include scale-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(1);
          }
        }
      }

      @include it('scale-y-0') {
        @include assert {
          @include output {
            @include scale-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0);
          }
        }
      }

      @include it('scale-50') {
        @include assert {
          @include output {
            @include scale-50;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.5) scaleY(0.5);
          }
        }
      }

      @include it('scale-x-50') {
        @include assert {
          @include output {
            @include scale-x-50;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.5) scaleY(1);
          }
        }
      }

      @include it('scale-y-50') {
        @include assert {
          @include output {
            @include scale-y-50;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.5);
          }
        }
      }

      @include it('scale-75') {
        @include assert {
          @include output {
            @include scale-75;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.75)
              scaleY(0.75);
          }
        }
      }

      @include it('scale-x-75') {
        @include assert {
          @include output {
            @include scale-x-75;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.75) scaleY(1);
          }
        }
      }

      @include it('scale-y-75') {
        @include assert {
          @include output {
            @include scale-y-75;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.75);
          }
        }
      }

      @include it('scale-90') {
        @include assert {
          @include output {
            @include scale-90;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.9) scaleY(0.9);
          }
        }
      }

      @include it('scale-x-90') {
        @include assert {
          @include output {
            @include scale-x-90;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.9) scaleY(1);
          }
        }
      }

      @include it('scale-y-90') {
        @include assert {
          @include output {
            @include scale-y-90;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.9);
          }
        }
      }

      @include it('scale-95') {
        @include assert {
          @include output {
            @include scale-95;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.95)
              scaleY(0.95);
          }
        }
      }

      @include it('scale-x-95') {
        @include assert {
          @include output {
            @include scale-x-95;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.95) scaleY(1);
          }
        }
      }

      @include it('scale-y-95') {
        @include assert {
          @include output {
            @include scale-y-95;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.95);
          }
        }
      }

      @include it('scale-100') {
        @include assert {
          @include output {
            @include scale-100;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('scale-x-100') {
        @include assert {
          @include output {
            @include scale-x-100;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('scale-y-100') {
        @include assert {
          @include output {
            @include scale-y-100;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it('scale-105') {
        @include assert {
          @include output {
            @include scale-105;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.05)
              scaleY(1.05);
          }
        }
      }

      @include it('scale-x-105') {
        @include assert {
          @include output {
            @include scale-x-105;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.05) scaleY(1);
          }
        }
      }

      @include it('scale-y-105') {
        @include assert {
          @include output {
            @include scale-y-105;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.05);
          }
        }
      }

      @include it('scale-110') {
        @include assert {
          @include output {
            @include scale-110;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.1) scaleY(1.1);
          }
        }
      }

      @include it('scale-x-110') {
        @include assert {
          @include output {
            @include scale-x-110;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.1) scaleY(1);
          }
        }
      }

      @include it('scale-y-110') {
        @include assert {
          @include output {
            @include scale-y-110;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.1);
          }
        }
      }

      @include it('scale-125') {
        @include assert {
          @include output {
            @include scale-125;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.25)
              scaleY(1.25);
          }
        }
      }

      @include it('scale-x-125') {
        @include assert {
          @include output {
            @include scale-x-125;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.25) scaleY(1);
          }
        }
      }

      @include it('scale-y-125') {
        @include assert {
          @include output {
            @include scale-y-125;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.25);
          }
        }
      }

      @include it('scale-150') {
        @include assert {
          @include output {
            @include scale-150;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.5) scaleY(1.5);
          }
        }
      }

      @include it('scale-x-150') {
        @include assert {
          @include output {
            @include scale-x-150;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.5) scaleY(1);
          }
        }
      }

      @include it('scale-y-150') {
        @include assert {
          @include output {
            @include scale-y-150;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.5);
          }
        }
      }

      @include it('-scale-0') {
        @include assert {
          @include output {
            @include \-scale-0;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(0);
          }
        }
      }

      @include it('-scale-x-0') {
        @include assert {
          @include output {
            @include \-scale-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(1);
          }
        }
      }

      @include it('-scale-y-0') {
        @include assert {
          @include output {
            @include \-scale-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0);
          }
        }
      }

      @include it('-scale-50') {
        @include assert {
          @include output {
            @include \-scale-50;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.5)
              scaleY(-0.5);
          }
        }
      }

      @include it('-scale-x-50') {
        @include assert {
          @include output {
            @include \-scale-x-50;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.5) scaleY(1);
          }
        }
      }

      @include it('-scale-y-50') {
        @include assert {
          @include output {
            @include \-scale-y-50;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-0.5);
          }
        }
      }

      @include it('-scale-75') {
        @include assert {
          @include output {
            @include \-scale-75;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.75)
              scaleY(-0.75);
          }
        }
      }

      @include it('-scale-x-75') {
        @include assert {
          @include output {
            @include \-scale-x-75;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.75) scaleY(1);
          }
        }
      }

      @include it('-scale-y-75') {
        @include assert {
          @include output {
            @include \-scale-y-75;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-0.75);
          }
        }
      }

      @include it('-scale-90') {
        @include assert {
          @include output {
            @include \-scale-90;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.9)
              scaleY(-0.9);
          }
        }
      }

      @include it('-scale-x-90') {
        @include assert {
          @include output {
            @include \-scale-x-90;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.9) scaleY(1);
          }
        }
      }

      @include it('-scale-y-90') {
        @include assert {
          @include output {
            @include \-scale-y-90;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-0.9);
          }
        }
      }

      @include it('-scale-95') {
        @include assert {
          @include output {
            @include \-scale-95;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.95)
              scaleY(-0.95);
          }
        }
      }

      @include it('-scale-x-95') {
        @include assert {
          @include output {
            @include \-scale-x-95;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.95) scaleY(1);
          }
        }
      }

      @include it('-scale-y-95') {
        @include assert {
          @include output {
            @include \-scale-y-95;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-0.95);
          }
        }
      }

      @include it('-scale-100') {
        @include assert {
          @include output {
            @include \-scale-100;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1) scaleY(-1);
          }
        }
      }

      @include it('-scale-x-100') {
        @include assert {
          @include output {
            @include \-scale-x-100;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1) scaleY(1);
          }
        }
      }

      @include it('-scale-y-100') {
        @include assert {
          @include output {
            @include \-scale-y-100;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1);
          }
        }
      }

      @include it('-scale-105') {
        @include assert {
          @include output {
            @include \-scale-105;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.05)
              scaleY(-1.05);
          }
        }
      }

      @include it('-scale-x-105') {
        @include assert {
          @include output {
            @include \-scale-x-105;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.05) scaleY(1);
          }
        }
      }

      @include it('-scale-y-105') {
        @include assert {
          @include output {
            @include \-scale-y-105;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.05);
          }
        }
      }

      @include it('-scale-110') {
        @include assert {
          @include output {
            @include \-scale-110;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.1)
              scaleY(-1.1);
          }
        }
      }

      @include it('-scale-x-110') {
        @include assert {
          @include output {
            @include \-scale-x-110;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.1) scaleY(1);
          }
        }
      }

      @include it('-scale-y-110') {
        @include assert {
          @include output {
            @include \-scale-y-110;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.1);
          }
        }
      }

      @include it('-scale-125') {
        @include assert {
          @include output {
            @include \-scale-125;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.25)
              scaleY(-1.25);
          }
        }
      }

      @include it('-scale-x-125') {
        @include assert {
          @include output {
            @include \-scale-x-125;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.25) scaleY(1);
          }
        }
      }

      @include it('-scale-y-125') {
        @include assert {
          @include output {
            @include \-scale-y-125;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.25);
          }
        }
      }

      @include it('-scale-150') {
        @include assert {
          @include output {
            @include \-scale-150;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.5)
              scaleY(-1.5);
          }
        }
      }

      @include it('-scale-x-150') {
        @include assert {
          @include output {
            @include \-scale-x-150;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.5) scaleY(1);
          }
        }
      }

      @include it('-scale-y-150') {
        @include assert {
          @include output {
            @include \-scale-y-150;
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.5);
          }
        }
      }
    }

    @include describe('Rwd') {
      @include it('sm\:scale-0') {
        @include assert {
          @include output {
            @include sm\:scale-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(0);
            }
          }
        }
      }

      @include it('sm\:scale-x-0') {
        @include assert {
          @include output {
            @include sm\:scale-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:scale-y-0') {
        @include assert {
          @include output {
            @include sm\:scale-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0);
            }
          }
        }
      }

      @include it('sm\:scale-50') {
        @include assert {
          @include output {
            @include sm\:scale-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.5)
                scaleY(0.5);
            }
          }
        }
      }

      @include it('sm\:scale-x-50') {
        @include assert {
          @include output {
            @include sm\:scale-x-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.5) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:scale-y-50') {
        @include assert {
          @include output {
            @include sm\:scale-y-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.5);
            }
          }
        }
      }

      @include it('sm\:scale-75') {
        @include assert {
          @include output {
            @include sm\:scale-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.75)
                scaleY(0.75);
            }
          }
        }
      }

      @include it('sm\:scale-x-75') {
        @include assert {
          @include output {
            @include sm\:scale-x-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.75) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:scale-y-75') {
        @include assert {
          @include output {
            @include sm\:scale-y-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.75);
            }
          }
        }
      }

      @include it('sm\:scale-90') {
        @include assert {
          @include output {
            @include sm\:scale-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.9)
                scaleY(0.9);
            }
          }
        }
      }

      @include it('sm\:scale-x-90') {
        @include assert {
          @include output {
            @include sm\:scale-x-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.9) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:scale-y-90') {
        @include assert {
          @include output {
            @include sm\:scale-y-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.9);
            }
          }
        }
      }

      @include it('sm\:scale-95') {
        @include assert {
          @include output {
            @include sm\:scale-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.95)
                scaleY(0.95);
            }
          }
        }
      }

      @include it('sm\:scale-x-95') {
        @include assert {
          @include output {
            @include sm\:scale-x-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.95) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:scale-y-95') {
        @include assert {
          @include output {
            @include sm\:scale-y-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.95);
            }
          }
        }
      }

      @include it('sm\:scale-100') {
        @include assert {
          @include output {
            @include sm\:scale-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:scale-x-100') {
        @include assert {
          @include output {
            @include sm\:scale-x-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:scale-y-100') {
        @include assert {
          @include output {
            @include sm\:scale-y-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:scale-105') {
        @include assert {
          @include output {
            @include sm\:scale-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.05)
                scaleY(1.05);
            }
          }
        }
      }

      @include it('sm\:scale-x-105') {
        @include assert {
          @include output {
            @include sm\:scale-x-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.05) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:scale-y-105') {
        @include assert {
          @include output {
            @include sm\:scale-y-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.05);
            }
          }
        }
      }

      @include it('sm\:scale-110') {
        @include assert {
          @include output {
            @include sm\:scale-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.1)
                scaleY(1.1);
            }
          }
        }
      }

      @include it('sm\:scale-x-110') {
        @include assert {
          @include output {
            @include sm\:scale-x-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:scale-y-110') {
        @include assert {
          @include output {
            @include sm\:scale-y-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.1);
            }
          }
        }
      }

      @include it('sm\:scale-125') {
        @include assert {
          @include output {
            @include sm\:scale-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.25)
                scaleY(1.25);
            }
          }
        }
      }

      @include it('sm\:scale-x-125') {
        @include assert {
          @include output {
            @include sm\:scale-x-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.25) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:scale-y-125') {
        @include assert {
          @include output {
            @include sm\:scale-y-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.25);
            }
          }
        }
      }

      @include it('sm\:scale-150') {
        @include assert {
          @include output {
            @include sm\:scale-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.5)
                scaleY(1.5);
            }
          }
        }
      }

      @include it('sm\:scale-x-150') {
        @include assert {
          @include output {
            @include sm\:scale-x-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.5) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:scale-y-150') {
        @include assert {
          @include output {
            @include sm\:scale-y-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.5);
            }
          }
        }
      }

      @include it('sm\:-scale-0') {
        @include assert {
          @include output {
            @include sm\:-scale-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(0);
            }
          }
        }
      }

      @include it('sm\:-scale-x-0') {
        @include assert {
          @include output {
            @include sm\:-scale-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-scale-y-0') {
        @include assert {
          @include output {
            @include sm\:-scale-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0);
            }
          }
        }
      }

      @include it('sm\:-scale-50') {
        @include assert {
          @include output {
            @include sm\:-scale-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.5)
                scaleY(-0.5);
            }
          }
        }
      }

      @include it('sm\:-scale-x-50') {
        @include assert {
          @include output {
            @include sm\:-scale-x-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.5) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-scale-y-50') {
        @include assert {
          @include output {
            @include sm\:-scale-y-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-0.5);
            }
          }
        }
      }

      @include it('sm\:-scale-75') {
        @include assert {
          @include output {
            @include sm\:-scale-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.75)
                scaleY(-0.75);
            }
          }
        }
      }

      @include it('sm\:-scale-x-75') {
        @include assert {
          @include output {
            @include sm\:-scale-x-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.75)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-scale-y-75') {
        @include assert {
          @include output {
            @include sm\:-scale-y-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-0.75);
            }
          }
        }
      }

      @include it('sm\:-scale-90') {
        @include assert {
          @include output {
            @include sm\:-scale-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.9)
                scaleY(-0.9);
            }
          }
        }
      }

      @include it('sm\:-scale-x-90') {
        @include assert {
          @include output {
            @include sm\:-scale-x-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.9) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-scale-y-90') {
        @include assert {
          @include output {
            @include sm\:-scale-y-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-0.9);
            }
          }
        }
      }

      @include it('sm\:-scale-95') {
        @include assert {
          @include output {
            @include sm\:-scale-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.95)
                scaleY(-0.95);
            }
          }
        }
      }

      @include it('sm\:-scale-x-95') {
        @include assert {
          @include output {
            @include sm\:-scale-x-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.95)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-scale-y-95') {
        @include assert {
          @include output {
            @include sm\:-scale-y-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-0.95);
            }
          }
        }
      }

      @include it('sm\:-scale-100') {
        @include assert {
          @include output {
            @include sm\:-scale-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1) scaleY(-1);
            }
          }
        }
      }

      @include it('sm\:-scale-x-100') {
        @include assert {
          @include output {
            @include sm\:-scale-x-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-scale-y-100') {
        @include assert {
          @include output {
            @include sm\:-scale-y-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1);
            }
          }
        }
      }

      @include it('sm\:-scale-105') {
        @include assert {
          @include output {
            @include sm\:-scale-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.05)
                scaleY(-1.05);
            }
          }
        }
      }

      @include it('sm\:-scale-x-105') {
        @include assert {
          @include output {
            @include sm\:-scale-x-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.05)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-scale-y-105') {
        @include assert {
          @include output {
            @include sm\:-scale-y-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-1.05);
            }
          }
        }
      }

      @include it('sm\:-scale-110') {
        @include assert {
          @include output {
            @include sm\:-scale-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.1)
                scaleY(-1.1);
            }
          }
        }
      }

      @include it('sm\:-scale-x-110') {
        @include assert {
          @include output {
            @include sm\:-scale-x-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.1) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-scale-y-110') {
        @include assert {
          @include output {
            @include sm\:-scale-y-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.1);
            }
          }
        }
      }

      @include it('sm\:-scale-125') {
        @include assert {
          @include output {
            @include sm\:-scale-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.25)
                scaleY(-1.25);
            }
          }
        }
      }

      @include it('sm\:-scale-x-125') {
        @include assert {
          @include output {
            @include sm\:-scale-x-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.25)
                scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-scale-y-125') {
        @include assert {
          @include output {
            @include sm\:-scale-y-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-1.25);
            }
          }
        }
      }

      @include it('sm\:-scale-150') {
        @include assert {
          @include output {
            @include sm\:-scale-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.5)
                scaleY(-1.5);
            }
          }
        }
      }

      @include it('sm\:-scale-x-150') {
        @include assert {
          @include output {
            @include sm\:-scale-x-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.5) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-scale-y-150') {
        @include assert {
          @include output {
            @include sm\:-scale-y-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.5);
            }
          }
        }
      }

      @include it('md\:scale-0') {
        @include assert {
          @include output {
            @include md\:scale-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(0);
            }
          }
        }
      }

      @include it('md\:scale-x-0') {
        @include assert {
          @include output {
            @include md\:scale-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(1);
            }
          }
        }
      }

      @include it('md\:scale-y-0') {
        @include assert {
          @include output {
            @include md\:scale-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0);
            }
          }
        }
      }

      @include it('md\:scale-50') {
        @include assert {
          @include output {
            @include md\:scale-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.5)
                scaleY(0.5);
            }
          }
        }
      }

      @include it('md\:scale-x-50') {
        @include assert {
          @include output {
            @include md\:scale-x-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.5) scaleY(1);
            }
          }
        }
      }

      @include it('md\:scale-y-50') {
        @include assert {
          @include output {
            @include md\:scale-y-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.5);
            }
          }
        }
      }

      @include it('md\:scale-75') {
        @include assert {
          @include output {
            @include md\:scale-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.75)
                scaleY(0.75);
            }
          }
        }
      }

      @include it('md\:scale-x-75') {
        @include assert {
          @include output {
            @include md\:scale-x-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.75) scaleY(1);
            }
          }
        }
      }

      @include it('md\:scale-y-75') {
        @include assert {
          @include output {
            @include md\:scale-y-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.75);
            }
          }
        }
      }

      @include it('md\:scale-90') {
        @include assert {
          @include output {
            @include md\:scale-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.9)
                scaleY(0.9);
            }
          }
        }
      }

      @include it('md\:scale-x-90') {
        @include assert {
          @include output {
            @include md\:scale-x-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.9) scaleY(1);
            }
          }
        }
      }

      @include it('md\:scale-y-90') {
        @include assert {
          @include output {
            @include md\:scale-y-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.9);
            }
          }
        }
      }

      @include it('md\:scale-95') {
        @include assert {
          @include output {
            @include md\:scale-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.95)
                scaleY(0.95);
            }
          }
        }
      }

      @include it('md\:scale-x-95') {
        @include assert {
          @include output {
            @include md\:scale-x-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.95) scaleY(1);
            }
          }
        }
      }

      @include it('md\:scale-y-95') {
        @include assert {
          @include output {
            @include md\:scale-y-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.95);
            }
          }
        }
      }

      @include it('md\:scale-100') {
        @include assert {
          @include output {
            @include md\:scale-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:scale-x-100') {
        @include assert {
          @include output {
            @include md\:scale-x-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:scale-y-100') {
        @include assert {
          @include output {
            @include md\:scale-y-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:scale-105') {
        @include assert {
          @include output {
            @include md\:scale-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.05)
                scaleY(1.05);
            }
          }
        }
      }

      @include it('md\:scale-x-105') {
        @include assert {
          @include output {
            @include md\:scale-x-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.05) scaleY(1);
            }
          }
        }
      }

      @include it('md\:scale-y-105') {
        @include assert {
          @include output {
            @include md\:scale-y-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.05);
            }
          }
        }
      }

      @include it('md\:scale-110') {
        @include assert {
          @include output {
            @include md\:scale-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.1)
                scaleY(1.1);
            }
          }
        }
      }

      @include it('md\:scale-x-110') {
        @include assert {
          @include output {
            @include md\:scale-x-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:scale-y-110') {
        @include assert {
          @include output {
            @include md\:scale-y-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.1);
            }
          }
        }
      }

      @include it('md\:scale-125') {
        @include assert {
          @include output {
            @include md\:scale-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.25)
                scaleY(1.25);
            }
          }
        }
      }

      @include it('md\:scale-x-125') {
        @include assert {
          @include output {
            @include md\:scale-x-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.25) scaleY(1);
            }
          }
        }
      }

      @include it('md\:scale-y-125') {
        @include assert {
          @include output {
            @include md\:scale-y-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.25);
            }
          }
        }
      }

      @include it('md\:scale-150') {
        @include assert {
          @include output {
            @include md\:scale-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.5)
                scaleY(1.5);
            }
          }
        }
      }

      @include it('md\:scale-x-150') {
        @include assert {
          @include output {
            @include md\:scale-x-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.5) scaleY(1);
            }
          }
        }
      }

      @include it('md\:scale-y-150') {
        @include assert {
          @include output {
            @include md\:scale-y-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.5);
            }
          }
        }
      }

      @include it('md\:-scale-0') {
        @include assert {
          @include output {
            @include md\:-scale-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(0);
            }
          }
        }
      }

      @include it('md\:-scale-x-0') {
        @include assert {
          @include output {
            @include md\:-scale-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-scale-y-0') {
        @include assert {
          @include output {
            @include md\:-scale-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0);
            }
          }
        }
      }

      @include it('md\:-scale-50') {
        @include assert {
          @include output {
            @include md\:-scale-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.5)
                scaleY(-0.5);
            }
          }
        }
      }

      @include it('md\:-scale-x-50') {
        @include assert {
          @include output {
            @include md\:-scale-x-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.5) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-scale-y-50') {
        @include assert {
          @include output {
            @include md\:-scale-y-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-0.5);
            }
          }
        }
      }

      @include it('md\:-scale-75') {
        @include assert {
          @include output {
            @include md\:-scale-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.75)
                scaleY(-0.75);
            }
          }
        }
      }

      @include it('md\:-scale-x-75') {
        @include assert {
          @include output {
            @include md\:-scale-x-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.75)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-scale-y-75') {
        @include assert {
          @include output {
            @include md\:-scale-y-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-0.75);
            }
          }
        }
      }

      @include it('md\:-scale-90') {
        @include assert {
          @include output {
            @include md\:-scale-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.9)
                scaleY(-0.9);
            }
          }
        }
      }

      @include it('md\:-scale-x-90') {
        @include assert {
          @include output {
            @include md\:-scale-x-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.9) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-scale-y-90') {
        @include assert {
          @include output {
            @include md\:-scale-y-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-0.9);
            }
          }
        }
      }

      @include it('md\:-scale-95') {
        @include assert {
          @include output {
            @include md\:-scale-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.95)
                scaleY(-0.95);
            }
          }
        }
      }

      @include it('md\:-scale-x-95') {
        @include assert {
          @include output {
            @include md\:-scale-x-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.95)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-scale-y-95') {
        @include assert {
          @include output {
            @include md\:-scale-y-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-0.95);
            }
          }
        }
      }

      @include it('md\:-scale-100') {
        @include assert {
          @include output {
            @include md\:-scale-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1) scaleY(-1);
            }
          }
        }
      }

      @include it('md\:-scale-x-100') {
        @include assert {
          @include output {
            @include md\:-scale-x-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-scale-y-100') {
        @include assert {
          @include output {
            @include md\:-scale-y-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1);
            }
          }
        }
      }

      @include it('md\:-scale-105') {
        @include assert {
          @include output {
            @include md\:-scale-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.05)
                scaleY(-1.05);
            }
          }
        }
      }

      @include it('md\:-scale-x-105') {
        @include assert {
          @include output {
            @include md\:-scale-x-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.05)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-scale-y-105') {
        @include assert {
          @include output {
            @include md\:-scale-y-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-1.05);
            }
          }
        }
      }

      @include it('md\:-scale-110') {
        @include assert {
          @include output {
            @include md\:-scale-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.1)
                scaleY(-1.1);
            }
          }
        }
      }

      @include it('md\:-scale-x-110') {
        @include assert {
          @include output {
            @include md\:-scale-x-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.1) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-scale-y-110') {
        @include assert {
          @include output {
            @include md\:-scale-y-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.1);
            }
          }
        }
      }

      @include it('md\:-scale-125') {
        @include assert {
          @include output {
            @include md\:-scale-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.25)
                scaleY(-1.25);
            }
          }
        }
      }

      @include it('md\:-scale-x-125') {
        @include assert {
          @include output {
            @include md\:-scale-x-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.25)
                scaleY(1);
            }
          }
        }
      }

      @include it('md\:-scale-y-125') {
        @include assert {
          @include output {
            @include md\:-scale-y-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-1.25);
            }
          }
        }
      }

      @include it('md\:-scale-150') {
        @include assert {
          @include output {
            @include md\:-scale-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.5)
                scaleY(-1.5);
            }
          }
        }
      }

      @include it('md\:-scale-x-150') {
        @include assert {
          @include output {
            @include md\:-scale-x-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.5) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-scale-y-150') {
        @include assert {
          @include output {
            @include md\:-scale-y-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.5);
            }
          }
        }
      }

      @include it('lg\:scale-0') {
        @include assert {
          @include output {
            @include lg\:scale-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(0);
            }
          }
        }
      }

      @include it('lg\:scale-x-0') {
        @include assert {
          @include output {
            @include lg\:scale-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:scale-y-0') {
        @include assert {
          @include output {
            @include lg\:scale-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0);
            }
          }
        }
      }

      @include it('lg\:scale-50') {
        @include assert {
          @include output {
            @include lg\:scale-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.5)
                scaleY(0.5);
            }
          }
        }
      }

      @include it('lg\:scale-x-50') {
        @include assert {
          @include output {
            @include lg\:scale-x-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.5) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:scale-y-50') {
        @include assert {
          @include output {
            @include lg\:scale-y-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.5);
            }
          }
        }
      }

      @include it('lg\:scale-75') {
        @include assert {
          @include output {
            @include lg\:scale-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.75)
                scaleY(0.75);
            }
          }
        }
      }

      @include it('lg\:scale-x-75') {
        @include assert {
          @include output {
            @include lg\:scale-x-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.75) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:scale-y-75') {
        @include assert {
          @include output {
            @include lg\:scale-y-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.75);
            }
          }
        }
      }

      @include it('lg\:scale-90') {
        @include assert {
          @include output {
            @include lg\:scale-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.9)
                scaleY(0.9);
            }
          }
        }
      }

      @include it('lg\:scale-x-90') {
        @include assert {
          @include output {
            @include lg\:scale-x-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.9) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:scale-y-90') {
        @include assert {
          @include output {
            @include lg\:scale-y-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.9);
            }
          }
        }
      }

      @include it('lg\:scale-95') {
        @include assert {
          @include output {
            @include lg\:scale-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.95)
                scaleY(0.95);
            }
          }
        }
      }

      @include it('lg\:scale-x-95') {
        @include assert {
          @include output {
            @include lg\:scale-x-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.95) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:scale-y-95') {
        @include assert {
          @include output {
            @include lg\:scale-y-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.95);
            }
          }
        }
      }

      @include it('lg\:scale-100') {
        @include assert {
          @include output {
            @include lg\:scale-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:scale-x-100') {
        @include assert {
          @include output {
            @include lg\:scale-x-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:scale-y-100') {
        @include assert {
          @include output {
            @include lg\:scale-y-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:scale-105') {
        @include assert {
          @include output {
            @include lg\:scale-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.05)
                scaleY(1.05);
            }
          }
        }
      }

      @include it('lg\:scale-x-105') {
        @include assert {
          @include output {
            @include lg\:scale-x-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.05) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:scale-y-105') {
        @include assert {
          @include output {
            @include lg\:scale-y-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.05);
            }
          }
        }
      }

      @include it('lg\:scale-110') {
        @include assert {
          @include output {
            @include lg\:scale-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.1)
                scaleY(1.1);
            }
          }
        }
      }

      @include it('lg\:scale-x-110') {
        @include assert {
          @include output {
            @include lg\:scale-x-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:scale-y-110') {
        @include assert {
          @include output {
            @include lg\:scale-y-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.1);
            }
          }
        }
      }

      @include it('lg\:scale-125') {
        @include assert {
          @include output {
            @include lg\:scale-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.25)
                scaleY(1.25);
            }
          }
        }
      }

      @include it('lg\:scale-x-125') {
        @include assert {
          @include output {
            @include lg\:scale-x-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.25) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:scale-y-125') {
        @include assert {
          @include output {
            @include lg\:scale-y-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.25);
            }
          }
        }
      }

      @include it('lg\:scale-150') {
        @include assert {
          @include output {
            @include lg\:scale-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.5)
                scaleY(1.5);
            }
          }
        }
      }

      @include it('lg\:scale-x-150') {
        @include assert {
          @include output {
            @include lg\:scale-x-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.5) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:scale-y-150') {
        @include assert {
          @include output {
            @include lg\:scale-y-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.5);
            }
          }
        }
      }

      @include it('lg\:-scale-0') {
        @include assert {
          @include output {
            @include lg\:-scale-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(0);
            }
          }
        }
      }

      @include it('lg\:-scale-x-0') {
        @include assert {
          @include output {
            @include lg\:-scale-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-scale-y-0') {
        @include assert {
          @include output {
            @include lg\:-scale-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0);
            }
          }
        }
      }

      @include it('lg\:-scale-50') {
        @include assert {
          @include output {
            @include lg\:-scale-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.5)
                scaleY(-0.5);
            }
          }
        }
      }

      @include it('lg\:-scale-x-50') {
        @include assert {
          @include output {
            @include lg\:-scale-x-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.5) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-scale-y-50') {
        @include assert {
          @include output {
            @include lg\:-scale-y-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-0.5);
            }
          }
        }
      }

      @include it('lg\:-scale-75') {
        @include assert {
          @include output {
            @include lg\:-scale-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.75)
                scaleY(-0.75);
            }
          }
        }
      }

      @include it('lg\:-scale-x-75') {
        @include assert {
          @include output {
            @include lg\:-scale-x-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.75)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-scale-y-75') {
        @include assert {
          @include output {
            @include lg\:-scale-y-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-0.75);
            }
          }
        }
      }

      @include it('lg\:-scale-90') {
        @include assert {
          @include output {
            @include lg\:-scale-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.9)
                scaleY(-0.9);
            }
          }
        }
      }

      @include it('lg\:-scale-x-90') {
        @include assert {
          @include output {
            @include lg\:-scale-x-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.9) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-scale-y-90') {
        @include assert {
          @include output {
            @include lg\:-scale-y-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-0.9);
            }
          }
        }
      }

      @include it('lg\:-scale-95') {
        @include assert {
          @include output {
            @include lg\:-scale-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.95)
                scaleY(-0.95);
            }
          }
        }
      }

      @include it('lg\:-scale-x-95') {
        @include assert {
          @include output {
            @include lg\:-scale-x-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.95)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-scale-y-95') {
        @include assert {
          @include output {
            @include lg\:-scale-y-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-0.95);
            }
          }
        }
      }

      @include it('lg\:-scale-100') {
        @include assert {
          @include output {
            @include lg\:-scale-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1) scaleY(-1);
            }
          }
        }
      }

      @include it('lg\:-scale-x-100') {
        @include assert {
          @include output {
            @include lg\:-scale-x-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-scale-y-100') {
        @include assert {
          @include output {
            @include lg\:-scale-y-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1);
            }
          }
        }
      }

      @include it('lg\:-scale-105') {
        @include assert {
          @include output {
            @include lg\:-scale-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.05)
                scaleY(-1.05);
            }
          }
        }
      }

      @include it('lg\:-scale-x-105') {
        @include assert {
          @include output {
            @include lg\:-scale-x-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.05)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-scale-y-105') {
        @include assert {
          @include output {
            @include lg\:-scale-y-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-1.05);
            }
          }
        }
      }

      @include it('lg\:-scale-110') {
        @include assert {
          @include output {
            @include lg\:-scale-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.1)
                scaleY(-1.1);
            }
          }
        }
      }

      @include it('lg\:-scale-x-110') {
        @include assert {
          @include output {
            @include lg\:-scale-x-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.1) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-scale-y-110') {
        @include assert {
          @include output {
            @include lg\:-scale-y-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.1);
            }
          }
        }
      }

      @include it('lg\:-scale-125') {
        @include assert {
          @include output {
            @include lg\:-scale-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.25)
                scaleY(-1.25);
            }
          }
        }
      }

      @include it('lg\:-scale-x-125') {
        @include assert {
          @include output {
            @include lg\:-scale-x-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.25)
                scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-scale-y-125') {
        @include assert {
          @include output {
            @include lg\:-scale-y-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-1.25);
            }
          }
        }
      }

      @include it('lg\:-scale-150') {
        @include assert {
          @include output {
            @include lg\:-scale-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.5)
                scaleY(-1.5);
            }
          }
        }
      }

      @include it('lg\:-scale-x-150') {
        @include assert {
          @include output {
            @include lg\:-scale-x-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.5) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-scale-y-150') {
        @include assert {
          @include output {
            @include lg\:-scale-y-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.5);
            }
          }
        }
      }

      @include it('xl\:scale-0') {
        @include assert {
          @include output {
            @include xl\:scale-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(0);
            }
          }
        }
      }

      @include it('xl\:scale-x-0') {
        @include assert {
          @include output {
            @include xl\:scale-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:scale-y-0') {
        @include assert {
          @include output {
            @include xl\:scale-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0);
            }
          }
        }
      }

      @include it('xl\:scale-50') {
        @include assert {
          @include output {
            @include xl\:scale-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.5)
                scaleY(0.5);
            }
          }
        }
      }

      @include it('xl\:scale-x-50') {
        @include assert {
          @include output {
            @include xl\:scale-x-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.5) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:scale-y-50') {
        @include assert {
          @include output {
            @include xl\:scale-y-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.5);
            }
          }
        }
      }

      @include it('xl\:scale-75') {
        @include assert {
          @include output {
            @include xl\:scale-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.75)
                scaleY(0.75);
            }
          }
        }
      }

      @include it('xl\:scale-x-75') {
        @include assert {
          @include output {
            @include xl\:scale-x-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.75) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:scale-y-75') {
        @include assert {
          @include output {
            @include xl\:scale-y-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.75);
            }
          }
        }
      }

      @include it('xl\:scale-90') {
        @include assert {
          @include output {
            @include xl\:scale-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.9)
                scaleY(0.9);
            }
          }
        }
      }

      @include it('xl\:scale-x-90') {
        @include assert {
          @include output {
            @include xl\:scale-x-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.9) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:scale-y-90') {
        @include assert {
          @include output {
            @include xl\:scale-y-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.9);
            }
          }
        }
      }

      @include it('xl\:scale-95') {
        @include assert {
          @include output {
            @include xl\:scale-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.95)
                scaleY(0.95);
            }
          }
        }
      }

      @include it('xl\:scale-x-95') {
        @include assert {
          @include output {
            @include xl\:scale-x-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.95) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:scale-y-95') {
        @include assert {
          @include output {
            @include xl\:scale-y-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.95);
            }
          }
        }
      }

      @include it('xl\:scale-100') {
        @include assert {
          @include output {
            @include xl\:scale-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:scale-x-100') {
        @include assert {
          @include output {
            @include xl\:scale-x-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:scale-y-100') {
        @include assert {
          @include output {
            @include xl\:scale-y-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:scale-105') {
        @include assert {
          @include output {
            @include xl\:scale-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.05)
                scaleY(1.05);
            }
          }
        }
      }

      @include it('xl\:scale-x-105') {
        @include assert {
          @include output {
            @include xl\:scale-x-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.05) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:scale-y-105') {
        @include assert {
          @include output {
            @include xl\:scale-y-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.05);
            }
          }
        }
      }

      @include it('xl\:scale-110') {
        @include assert {
          @include output {
            @include xl\:scale-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.1)
                scaleY(1.1);
            }
          }
        }
      }

      @include it('xl\:scale-x-110') {
        @include assert {
          @include output {
            @include xl\:scale-x-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:scale-y-110') {
        @include assert {
          @include output {
            @include xl\:scale-y-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.1);
            }
          }
        }
      }

      @include it('xl\:scale-125') {
        @include assert {
          @include output {
            @include xl\:scale-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.25)
                scaleY(1.25);
            }
          }
        }
      }

      @include it('xl\:scale-x-125') {
        @include assert {
          @include output {
            @include xl\:scale-x-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.25) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:scale-y-125') {
        @include assert {
          @include output {
            @include xl\:scale-y-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.25);
            }
          }
        }
      }

      @include it('xl\:scale-150') {
        @include assert {
          @include output {
            @include xl\:scale-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.5)
                scaleY(1.5);
            }
          }
        }
      }

      @include it('xl\:scale-x-150') {
        @include assert {
          @include output {
            @include xl\:scale-x-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.5) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:scale-y-150') {
        @include assert {
          @include output {
            @include xl\:scale-y-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.5);
            }
          }
        }
      }

      @include it('xl\:-scale-0') {
        @include assert {
          @include output {
            @include xl\:-scale-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(0);
            }
          }
        }
      }

      @include it('xl\:-scale-x-0') {
        @include assert {
          @include output {
            @include xl\:-scale-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-scale-y-0') {
        @include assert {
          @include output {
            @include xl\:-scale-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0);
            }
          }
        }
      }

      @include it('xl\:-scale-50') {
        @include assert {
          @include output {
            @include xl\:-scale-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.5)
                scaleY(-0.5);
            }
          }
        }
      }

      @include it('xl\:-scale-x-50') {
        @include assert {
          @include output {
            @include xl\:-scale-x-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.5) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-scale-y-50') {
        @include assert {
          @include output {
            @include xl\:-scale-y-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-0.5);
            }
          }
        }
      }

      @include it('xl\:-scale-75') {
        @include assert {
          @include output {
            @include xl\:-scale-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.75)
                scaleY(-0.75);
            }
          }
        }
      }

      @include it('xl\:-scale-x-75') {
        @include assert {
          @include output {
            @include xl\:-scale-x-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.75)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-scale-y-75') {
        @include assert {
          @include output {
            @include xl\:-scale-y-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-0.75);
            }
          }
        }
      }

      @include it('xl\:-scale-90') {
        @include assert {
          @include output {
            @include xl\:-scale-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.9)
                scaleY(-0.9);
            }
          }
        }
      }

      @include it('xl\:-scale-x-90') {
        @include assert {
          @include output {
            @include xl\:-scale-x-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.9) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-scale-y-90') {
        @include assert {
          @include output {
            @include xl\:-scale-y-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-0.9);
            }
          }
        }
      }

      @include it('xl\:-scale-95') {
        @include assert {
          @include output {
            @include xl\:-scale-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.95)
                scaleY(-0.95);
            }
          }
        }
      }

      @include it('xl\:-scale-x-95') {
        @include assert {
          @include output {
            @include xl\:-scale-x-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.95)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-scale-y-95') {
        @include assert {
          @include output {
            @include xl\:-scale-y-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-0.95);
            }
          }
        }
      }

      @include it('xl\:-scale-100') {
        @include assert {
          @include output {
            @include xl\:-scale-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1) scaleY(-1);
            }
          }
        }
      }

      @include it('xl\:-scale-x-100') {
        @include assert {
          @include output {
            @include xl\:-scale-x-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-scale-y-100') {
        @include assert {
          @include output {
            @include xl\:-scale-y-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1);
            }
          }
        }
      }

      @include it('xl\:-scale-105') {
        @include assert {
          @include output {
            @include xl\:-scale-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.05)
                scaleY(-1.05);
            }
          }
        }
      }

      @include it('xl\:-scale-x-105') {
        @include assert {
          @include output {
            @include xl\:-scale-x-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.05)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-scale-y-105') {
        @include assert {
          @include output {
            @include xl\:-scale-y-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-1.05);
            }
          }
        }
      }

      @include it('xl\:-scale-110') {
        @include assert {
          @include output {
            @include xl\:-scale-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.1)
                scaleY(-1.1);
            }
          }
        }
      }

      @include it('xl\:-scale-x-110') {
        @include assert {
          @include output {
            @include xl\:-scale-x-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.1) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-scale-y-110') {
        @include assert {
          @include output {
            @include xl\:-scale-y-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.1);
            }
          }
        }
      }

      @include it('xl\:-scale-125') {
        @include assert {
          @include output {
            @include xl\:-scale-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.25)
                scaleY(-1.25);
            }
          }
        }
      }

      @include it('xl\:-scale-x-125') {
        @include assert {
          @include output {
            @include xl\:-scale-x-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.25)
                scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-scale-y-125') {
        @include assert {
          @include output {
            @include xl\:-scale-y-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-1.25);
            }
          }
        }
      }

      @include it('xl\:-scale-150') {
        @include assert {
          @include output {
            @include xl\:-scale-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.5)
                scaleY(-1.5);
            }
          }
        }
      }

      @include it('xl\:-scale-x-150') {
        @include assert {
          @include output {
            @include xl\:-scale-x-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.5) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-scale-y-150') {
        @include assert {
          @include output {
            @include xl\:-scale-y-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.5);
            }
          }
        }
      }

      @include it('2xl\:scale-0') {
        @include assert {
          @include output {
            @include \2xl\:scale-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(0);
            }
          }
        }
      }

      @include it('2xl\:scale-x-0') {
        @include assert {
          @include output {
            @include \2xl\:scale-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:scale-y-0') {
        @include assert {
          @include output {
            @include \2xl\:scale-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0);
            }
          }
        }
      }

      @include it('2xl\:scale-50') {
        @include assert {
          @include output {
            @include \2xl\:scale-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.5)
                scaleY(0.5);
            }
          }
        }
      }

      @include it('2xl\:scale-x-50') {
        @include assert {
          @include output {
            @include \2xl\:scale-x-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.5) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:scale-y-50') {
        @include assert {
          @include output {
            @include \2xl\:scale-y-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.5);
            }
          }
        }
      }

      @include it('2xl\:scale-75') {
        @include assert {
          @include output {
            @include \2xl\:scale-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.75)
                scaleY(0.75);
            }
          }
        }
      }

      @include it('2xl\:scale-x-75') {
        @include assert {
          @include output {
            @include \2xl\:scale-x-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.75) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:scale-y-75') {
        @include assert {
          @include output {
            @include \2xl\:scale-y-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.75);
            }
          }
        }
      }

      @include it('2xl\:scale-90') {
        @include assert {
          @include output {
            @include \2xl\:scale-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.9)
                scaleY(0.9);
            }
          }
        }
      }

      @include it('2xl\:scale-x-90') {
        @include assert {
          @include output {
            @include \2xl\:scale-x-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.9) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:scale-y-90') {
        @include assert {
          @include output {
            @include \2xl\:scale-y-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.9);
            }
          }
        }
      }

      @include it('2xl\:scale-95') {
        @include assert {
          @include output {
            @include \2xl\:scale-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.95)
                scaleY(0.95);
            }
          }
        }
      }

      @include it('2xl\:scale-x-95') {
        @include assert {
          @include output {
            @include \2xl\:scale-x-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0.95) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:scale-y-95') {
        @include assert {
          @include output {
            @include \2xl\:scale-y-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0.95);
            }
          }
        }
      }

      @include it('2xl\:scale-100') {
        @include assert {
          @include output {
            @include \2xl\:scale-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:scale-x-100') {
        @include assert {
          @include output {
            @include \2xl\:scale-x-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:scale-y-100') {
        @include assert {
          @include output {
            @include \2xl\:scale-y-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:scale-105') {
        @include assert {
          @include output {
            @include \2xl\:scale-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.05)
                scaleY(1.05);
            }
          }
        }
      }

      @include it('2xl\:scale-x-105') {
        @include assert {
          @include output {
            @include \2xl\:scale-x-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.05) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:scale-y-105') {
        @include assert {
          @include output {
            @include \2xl\:scale-y-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.05);
            }
          }
        }
      }

      @include it('2xl\:scale-110') {
        @include assert {
          @include output {
            @include \2xl\:scale-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.1)
                scaleY(1.1);
            }
          }
        }
      }

      @include it('2xl\:scale-x-110') {
        @include assert {
          @include output {
            @include \2xl\:scale-x-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:scale-y-110') {
        @include assert {
          @include output {
            @include \2xl\:scale-y-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.1);
            }
          }
        }
      }

      @include it('2xl\:scale-125') {
        @include assert {
          @include output {
            @include \2xl\:scale-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.25)
                scaleY(1.25);
            }
          }
        }
      }

      @include it('2xl\:scale-x-125') {
        @include assert {
          @include output {
            @include \2xl\:scale-x-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.25) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:scale-y-125') {
        @include assert {
          @include output {
            @include \2xl\:scale-y-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.25);
            }
          }
        }
      }

      @include it('2xl\:scale-150') {
        @include assert {
          @include output {
            @include \2xl\:scale-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.5)
                scaleY(1.5);
            }
          }
        }
      }

      @include it('2xl\:scale-x-150') {
        @include assert {
          @include output {
            @include \2xl\:scale-x-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.5) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:scale-y-150') {
        @include assert {
          @include output {
            @include \2xl\:scale-y-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.5);
            }
          }
        }
      }

      @include it('2xl\:-scale-0') {
        @include assert {
          @include output {
            @include \2xl\:-scale-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(0);
            }
          }
        }
      }

      @include it('2xl\:-scale-x-0') {
        @include assert {
          @include output {
            @include \2xl\:-scale-x-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(0) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-scale-y-0') {
        @include assert {
          @include output {
            @include \2xl\:-scale-y-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(0);
            }
          }
        }
      }

      @include it('2xl\:-scale-50') {
        @include assert {
          @include output {
            @include \2xl\:-scale-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.5)
                scaleY(-0.5);
            }
          }
        }
      }

      @include it('2xl\:-scale-x-50') {
        @include assert {
          @include output {
            @include \2xl\:-scale-x-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.5) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-scale-y-50') {
        @include assert {
          @include output {
            @include \2xl\:-scale-y-50;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-0.5);
            }
          }
        }
      }

      @include it('2xl\:-scale-75') {
        @include assert {
          @include output {
            @include \2xl\:-scale-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.75)
                scaleY(-0.75);
            }
          }
        }
      }

      @include it('2xl\:-scale-x-75') {
        @include assert {
          @include output {
            @include \2xl\:-scale-x-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.75)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-scale-y-75') {
        @include assert {
          @include output {
            @include \2xl\:-scale-y-75;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-0.75);
            }
          }
        }
      }

      @include it('2xl\:-scale-90') {
        @include assert {
          @include output {
            @include \2xl\:-scale-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.9)
                scaleY(-0.9);
            }
          }
        }
      }

      @include it('2xl\:-scale-x-90') {
        @include assert {
          @include output {
            @include \2xl\:-scale-x-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.9) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-scale-y-90') {
        @include assert {
          @include output {
            @include \2xl\:-scale-y-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-0.9);
            }
          }
        }
      }

      @include it('2xl\:-scale-95') {
        @include assert {
          @include output {
            @include \2xl\:-scale-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.95)
                scaleY(-0.95);
            }
          }
        }
      }

      @include it('2xl\:-scale-x-95') {
        @include assert {
          @include output {
            @include \2xl\:-scale-x-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-0.95)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-scale-y-95') {
        @include assert {
          @include output {
            @include \2xl\:-scale-y-95;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-0.95);
            }
          }
        }
      }

      @include it('2xl\:-scale-100') {
        @include assert {
          @include output {
            @include \2xl\:-scale-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1) scaleY(-1);
            }
          }
        }
      }

      @include it('2xl\:-scale-x-100') {
        @include assert {
          @include output {
            @include \2xl\:-scale-x-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-scale-y-100') {
        @include assert {
          @include output {
            @include \2xl\:-scale-y-100;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1);
            }
          }
        }
      }

      @include it('2xl\:-scale-105') {
        @include assert {
          @include output {
            @include \2xl\:-scale-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.05)
                scaleY(-1.05);
            }
          }
        }
      }

      @include it('2xl\:-scale-x-105') {
        @include assert {
          @include output {
            @include \2xl\:-scale-x-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.05)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-scale-y-105') {
        @include assert {
          @include output {
            @include \2xl\:-scale-y-105;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-1.05);
            }
          }
        }
      }

      @include it('2xl\:-scale-110') {
        @include assert {
          @include output {
            @include \2xl\:-scale-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.1)
                scaleY(-1.1);
            }
          }
        }
      }

      @include it('2xl\:-scale-x-110') {
        @include assert {
          @include output {
            @include \2xl\:-scale-x-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.1) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-scale-y-110') {
        @include assert {
          @include output {
            @include \2xl\:-scale-y-110;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.1);
            }
          }
        }
      }

      @include it('2xl\:-scale-125') {
        @include assert {
          @include output {
            @include \2xl\:-scale-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.25)
                scaleY(-1.25);
            }
          }
        }
      }

      @include it('2xl\:-scale-x-125') {
        @include assert {
          @include output {
            @include \2xl\:-scale-x-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.25)
                scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-scale-y-125') {
        @include assert {
          @include output {
            @include \2xl\:-scale-y-125;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1)
                scaleY(-1.25);
            }
          }
        }
      }

      @include it('2xl\:-scale-150') {
        @include assert {
          @include output {
            @include \2xl\:-scale-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.5)
                scaleY(-1.5);
            }
          }
        }
      }

      @include it('2xl\:-scale-x-150') {
        @include assert {
          @include output {
            @include \2xl\:-scale-x-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.5) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-scale-y-150') {
        @include assert {
          @include output {
            @include \2xl\:-scale-y-150;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.5);
            }
          }
        }
      }
    }

    @include describe('Custom') {
      @include it('scale-(1.7)') {
        @include assert {
          @include output {
            @include scale-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.7) scaleY(1.7);
          }
        }
      }

      @include it('scale-x-(1.7)') {
        @include assert {
          @include output {
            @include scale-x-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.7) scaleY(1);
          }
        }
      }

      @include it('scale-y-(1.7)') {
        @include assert {
          @include output {
            @include scale-y-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.7);
          }
        }
      }

      @include it('-scale-(1.7)') {
        @include assert {
          @include output {
            @include \-scale-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.7)
              scaleY(-1.7);
          }
        }
      }

      @include it('-scale-x-(1.7)') {
        @include assert {
          @include output {
            @include \-scale-x-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.7) scaleY(1);
          }
        }
      }

      @include it('-scale-y-(1.7)') {
        @include assert {
          @include output {
            @include \-scale-y-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.7);
          }
        }
      }

      @include it('sm\:scale-(1.7)') {
        @include assert {
          @include output {
            @include sm\:scale-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.7)
                scaleY(1.7);
            }
          }
        }
      }

      @include it('sm\:scale-x-(1.7)') {
        @include assert {
          @include output {
            @include sm\:scale-x-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.7) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:scale-y-(1.7)') {
        @include assert {
          @include output {
            @include sm\:scale-y-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.7);
            }
          }
        }
      }

      @include it('sm\:-scale-(1.7)') {
        @include assert {
          @include output {
            @include sm\:-scale-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.7)
                scaleY(-1.7);
            }
          }
        }
      }

      @include it('sm\:-scale-x-(1.7)') {
        @include assert {
          @include output {
            @include sm\:-scale-x-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.7) scaleY(1);
            }
          }
        }
      }

      @include it('sm\:-scale-y-(1.7)') {
        @include assert {
          @include output {
            @include sm\:-scale-y-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.7);
            }
          }
        }
      }

      @include it('md\:scale-(1.7)') {
        @include assert {
          @include output {
            @include md\:scale-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.7)
                scaleY(1.7);
            }
          }
        }
      }

      @include it('md\:scale-x-(1.7)') {
        @include assert {
          @include output {
            @include md\:scale-x-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.7) scaleY(1);
            }
          }
        }
      }

      @include it('md\:scale-y-(1.7)') {
        @include assert {
          @include output {
            @include md\:scale-y-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.7);
            }
          }
        }
      }

      @include it('md\:-scale-(1.7)') {
        @include assert {
          @include output {
            @include sm\:-scale-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.7)
                scaleY(-1.7);
            }
          }
        }
      }

      @include it('md\:-scale-x-(1.7)') {
        @include assert {
          @include output {
            @include md\:-scale-x-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.7) scaleY(1);
            }
          }
        }
      }

      @include it('md\:-scale-y-(1.7)') {
        @include assert {
          @include output {
            @include md\:-scale-y-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.7);
            }
          }
        }
      }

      @include it('lg\:scale-(1.7)') {
        @include assert {
          @include output {
            @include lg\:scale-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.7)
                scaleY(1.7);
            }
          }
        }
      }

      @include it('lg\:scale-x-(1.7)') {
        @include assert {
          @include output {
            @include lg\:scale-x-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.7) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:scale-y-(1.7)') {
        @include assert {
          @include output {
            @include lg\:scale-y-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.7);
            }
          }
        }
      }

      @include it('lg\:-scale-(1.7)') {
        @include assert {
          @include output {
            @include sm\:-scale-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.7)
                scaleY(-1.7);
            }
          }
        }
      }

      @include it('lg\:-scale-x-(1.7)') {
        @include assert {
          @include output {
            @include lg\:-scale-x-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.7) scaleY(1);
            }
          }
        }
      }

      @include it('lg\:-scale-y-(1.7)') {
        @include assert {
          @include output {
            @include lg\:-scale-y-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.7);
            }
          }
        }
      }

      @include it('xl\:scale-(1.7)') {
        @include assert {
          @include output {
            @include xl\:scale-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.7)
                scaleY(1.7);
            }
          }
        }
      }

      @include it('xl\:scale-x-(1.7)') {
        @include assert {
          @include output {
            @include xl\:scale-x-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.7) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:scale-y-(1.7)') {
        @include assert {
          @include output {
            @include xl\:scale-y-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.7);
            }
          }
        }
      }

      @include it('xl\:-scale-(1.7)') {
        @include assert {
          @include output {
            @include sm\:-scale-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.7)
                scaleY(-1.7);
            }
          }
        }
      }

      @include it('xl\:-scale-x-(1.7)') {
        @include assert {
          @include output {
            @include xl\:-scale-x-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.7) scaleY(1);
            }
          }
        }
      }

      @include it('xl\:-scale-y-(1.7)') {
        @include assert {
          @include output {
            @include xl\:-scale-y-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.7);
            }
          }
        }
      }

      @include it('2xl\:scale-(1.7)') {
        @include assert {
          @include output {
            @include \2xl\:scale-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.7)
                scaleY(1.7);
            }
          }
        }
      }

      @include it('2xl\:scale-x-(1.7)') {
        @include assert {
          @include output {
            @include \2xl\:scale-x-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1.7) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:scale-y-(1.7)') {
        @include assert {
          @include output {
            @include \2xl\:scale-y-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1.7);
            }
          }
        }
      }

      @include it('2xl\:-scale-(1.7)') {
        @include assert {
          @include output {
            @include sm\:-scale-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.7)
                scaleY(-1.7);
            }
          }
        }
      }

      @include it('2xl\:-scale-x-(1.7)') {
        @include assert {
          @include output {
            @include \2xl\:-scale-x-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(-1.7) scaleY(1);
            }
          }
        }
      }

      @include it('2xl\:-scale-y-(1.7)') {
        @include assert {
          @include output {
            @include \2xl\:-scale-y-(1.7);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(-1.7);
            }
          }
        }
      }
    }
  }
}
