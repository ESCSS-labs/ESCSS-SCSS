@use 'true' as *;
@use '../awaken' as *;

@include describe('2.Flexbox & Grid') {
  @include describe('Grid Template Rows') {
    @include describe('Basic') {
      @include it('grid-rows-1') {
        @include assert {
          @include output {
            @include grid-rows-1;
            @include utils_reset-tw;
          }

          @include expect {
            grid-template-rows: repeat(1, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-rows-2') {
        @include assert {
          @include output {
            @include grid-rows-2;
            @include utils_reset-tw;
          }

          @include expect {
            grid-template-rows: repeat(2, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-rows-3') {
        @include assert {
          @include output {
            @include grid-rows-3;
            @include utils_reset-tw;
          }

          @include expect {
            grid-template-rows: repeat(3, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-rows-4') {
        @include assert {
          @include output {
            @include grid-rows-4;
            @include utils_reset-tw;
          }

          @include expect {
            grid-template-rows: repeat(4, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-rows-5') {
        @include assert {
          @include output {
            @include grid-rows-5;
            @include utils_reset-tw;
          }

          @include expect {
            grid-template-rows: repeat(5, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-rows-6') {
        @include assert {
          @include output {
            @include grid-rows-6;
            @include utils_reset-tw;
          }

          @include expect {
            grid-template-rows: repeat(6, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-rows-7') {
        @include assert {
          @include output {
            @include grid-rows-7;
            @include utils_reset-tw;
          }

          @include expect {
            grid-template-rows: repeat(7, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-rows-8') {
        @include assert {
          @include output {
            @include grid-rows-8;
            @include utils_reset-tw;
          }

          @include expect {
            grid-template-rows: repeat(8, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-rows-9') {
        @include assert {
          @include output {
            @include grid-rows-9;
            @include utils_reset-tw;
          }

          @include expect {
            grid-template-rows: repeat(9, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-rows-10') {
        @include assert {
          @include output {
            @include grid-rows-10;
            @include utils_reset-tw;
          }

          @include expect {
            grid-template-rows: repeat(10, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-rows-11') {
        @include assert {
          @include output {
            @include grid-rows-11;
            @include utils_reset-tw;
          }

          @include expect {
            grid-template-rows: repeat(11, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-rows-12') {
        @include assert {
          @include output {
            @include grid-rows-12;
            @include utils_reset-tw;
          }

          @include expect {
            grid-template-rows: repeat(12, minmax(0, 1fr));
          }
        }
      }

      @include it('grid-rows-none') {
        @include assert {
          @include output {
            @include grid-rows-none;
            @include utils_reset-tw;
          }

          @include expect {
            grid-template-rows: none;
          }
        }
      }

      @include it('grid-rows-subgrid') {
        @include assert {
          @include output {
            @include grid-rows-subgrid;
            @include utils_reset-tw;
          }

          @include expect {
            grid-template-rows: subgrid;
          }
        }
      }
    }

    @include describe('Custom') {
      @include it('grid-rows-(200px minmax(900px, 1fr) 100px)') {
        @include assert {
          @include output {
            @include grid-rows-(200px minmax(900px, 1fr) 100px);
            @include utils_reset-tw;
          }

          @include expect {
            grid-template-rows: 200px minmax(900px, 1fr) 100px;
          }
        }
      }
    }
  }
}
