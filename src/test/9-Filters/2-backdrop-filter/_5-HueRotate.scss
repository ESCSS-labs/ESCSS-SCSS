@use "true" as *;
@use "../../style" as *;

@include describe("9-Filters") {
  @include describe("5-Backdrop HueRotate") {
    @include describe("Positive") {
      @include describe("Basic") {
        @include it("backdrop-hue-rotate-0") {
          @include assert {
            @include output {
              @include backdrop-hue-rotate-0;
            }

            @include expect {
              --tw-backdrop-hue-rotate: hue-rotate(0deg);
              backdrop-filter: var(--tw-backdrop-blur,)
                var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,)
                var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,)
                var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,)
                var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
            }
          }
        }

        @include it("backdrop-hue-rotate-15") {
          @include assert {
            @include output {
              @include backdrop-hue-rotate-15;
            }

            @include expect {
              --tw-backdrop-hue-rotate: hue-rotate(15deg);
              backdrop-filter: var(--tw-backdrop-blur,)
                var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,)
                var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,)
                var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,)
                var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
            }
          }
        }

        @include it("backdrop-hue-rotate-30") {
          @include assert {
            @include output {
              @include backdrop-hue-rotate-30;
            }

            @include expect {
              --tw-backdrop-hue-rotate: hue-rotate(30deg);
              backdrop-filter: var(--tw-backdrop-blur,)
                var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,)
                var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,)
                var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,)
                var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
            }
          }
        }

        @include it("backdrop-hue-rotate-60") {
          @include assert {
            @include output {
              @include backdrop-hue-rotate-60;
            }

            @include expect {
              --tw-backdrop-hue-rotate: hue-rotate(60deg);
              backdrop-filter: var(--tw-backdrop-blur,)
                var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,)
                var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,)
                var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,)
                var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
            }
          }
        }

        @include it("backdrop-hue-rotate-90") {
          @include assert {
            @include output {
              @include backdrop-hue-rotate-90;
            }

            @include expect {
              --tw-backdrop-hue-rotate: hue-rotate(90deg);
              backdrop-filter: var(--tw-backdrop-blur,)
                var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,)
                var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,)
                var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,)
                var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
            }
          }
        }

        @include it("backdrop-hue-rotate-180") {
          @include assert {
            @include output {
              @include backdrop-hue-rotate-180;
            }

            @include expect {
              --tw-backdrop-hue-rotate: hue-rotate(180deg);
              backdrop-filter: var(--tw-backdrop-blur,)
                var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,)
                var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,)
                var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,)
                var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
            }
          }
        }
      }

      @include describe("Custom") {
        @include it("backdrop-hue-rotate-(270deg)") {
          @include assert {
            @include output {
              @include backdrop-hue-rotate-(270deg);
            }

            @include expect {
              --tw-backdrop-hue-rotate: hue-rotate(270deg);
              backdrop-filter: var(--tw-backdrop-blur,)
                var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,)
                var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,)
                var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,)
                var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
            }
          }
        }
      }
    }

    @include describe("Negative") {
      @include describe("Basic") {
        @include it("-backdrop-hue-rotate-0") {
          @include assert {
            @include output {
              @include \-backdrop-hue-rotate-0;
            }

            @include expect {
              --tw-backdrop-hue-rotate: hue-rotate(0deg);
              backdrop-filter: var(--tw-backdrop-blur,)
                var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,)
                var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,)
                var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,)
                var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
            }
          }
        }

        @include it("-backdrop-hue-rotate-15") {
          @include assert {
            @include output {
              @include \-backdrop-hue-rotate-15;
            }

            @include expect {
              --tw-backdrop-hue-rotate: hue-rotate(-15deg);
              backdrop-filter: var(--tw-backdrop-blur,)
                var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,)
                var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,)
                var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,)
                var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
            }
          }
        }

        @include it("-backdrop-hue-rotate-30") {
          @include assert {
            @include output {
              @include \-backdrop-hue-rotate-30;
            }

            @include expect {
              --tw-backdrop-hue-rotate: hue-rotate(-30deg);
              backdrop-filter: var(--tw-backdrop-blur,)
                var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,)
                var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,)
                var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,)
                var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
            }
          }
        }

        @include it("-backdrop-hue-rotate-60") {
          @include assert {
            @include output {
              @include \-backdrop-hue-rotate-60;
            }

            @include expect {
              --tw-backdrop-hue-rotate: hue-rotate(-60deg);
              backdrop-filter: var(--tw-backdrop-blur,)
                var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,)
                var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,)
                var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,)
                var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
            }
          }
        }

        @include it("-backdrop-hue-rotate-90") {
          @include assert {
            @include output {
              @include \-backdrop-hue-rotate-90;
            }

            @include expect {
              --tw-backdrop-hue-rotate: hue-rotate(-90deg);
              backdrop-filter: var(--tw-backdrop-blur,)
                var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,)
                var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,)
                var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,)
                var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
            }
          }
        }

        @include it("-backdrop-hue-rotate-180") {
          @include assert {
            @include output {
              @include \-backdrop-hue-rotate-180;
            }

            @include expect {
              --tw-backdrop-hue-rotate: hue-rotate(-180deg);
              backdrop-filter: var(--tw-backdrop-blur,)
                var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,)
                var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,)
                var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,)
                var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
            }
          }
        }
      }

      @include describe("Custom") {
        @include it("-backdrop-hue-rotate-(270deg)") {
          @include assert {
            @include output {
              @include \-backdrop-hue-rotate-(270deg);
            }

            @include expect {
              --tw-backdrop-hue-rotate: hue-rotate(-270deg);
              backdrop-filter: var(--tw-backdrop-blur,)
                var(--tw-backdrop-brightness,) var(--tw-backdrop-contrast,)
                var(--tw-backdrop-grayscale,) var(--tw-backdrop-hue-rotate,)
                var(--tw-backdrop-invert,) var(--tw-backdrop-opacity,)
                var(--tw-backdrop-saturate,) var(--tw-backdrop-sepia,);
            }
          }
        }
      }
    }
  }
}
