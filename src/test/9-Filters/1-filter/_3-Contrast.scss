@use "true" as *;
@use "../../style" as *;

@include describe("9-Filters") {
  @include describe("3-Contrast") {
    @include describe("Basic") {
      @include it("contrast-0") {
        @include assert {
          @include output {
            @include contrast-0;
          }

          @include expect {
            --tw-contrast: contrast(0);
            filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,)
              var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,)
              var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
          }
        }
      }

      @include it("contrast-50") {
        @include assert {
          @include output {
            @include contrast-50;
          }

          @include expect {
            --tw-contrast: contrast(0.5);
            filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,)
              var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,)
              var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
          }
        }
      }

      @include it("contrast-75") {
        @include assert {
          @include output {
            @include contrast-75;
          }

          @include expect {
            --tw-contrast: contrast(0.75);
            filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,)
              var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,)
              var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
          }
        }
      }

      @include it("contrast-100") {
        @include assert {
          @include output {
            @include contrast-100;
          }

          @include expect {
            --tw-contrast: contrast(1);
            filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,)
              var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,)
              var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
          }
        }
      }

      @include it("contrast-125") {
        @include assert {
          @include output {
            @include contrast-125;
          }

          @include expect {
            --tw-contrast: contrast(1.25);
            filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,)
              var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,)
              var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
          }
        }
      }

      @include it("contrast-150") {
        @include assert {
          @include output {
            @include contrast-150;
          }

          @include expect {
            --tw-contrast: contrast(1.5);
            filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,)
              var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,)
              var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
          }
        }
      }

      @include it("contrast-200") {
        @include assert {
          @include output {
            @include contrast-200;
          }

          @include expect {
            --tw-contrast: contrast(2);
            filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,)
              var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,)
              var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
          }
        }
      }
    }

    @include describe("Custom") {
      @include it("contrast-(.25)") {
        @include assert {
          @include output {
            @include contrast-(0.25);
          }

          @include expect {
            --tw-contrast: contrast(0.25);
            filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,)
              var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,)
              var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
          }
        }
      }
    }
  }
}
