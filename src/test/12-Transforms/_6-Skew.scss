@use "true" as *;
@use "../style" as *;

@include describe("12-Transforms") {
  @include describe("6-Skew") {
    @include describe("Positive") {
      @include describe("Basic") {
        @include it("skew-0") {
          @include assert {
            @include output {
              @include skew-0;
            }

            @include expect {
              --tw-skew-x: skewX(0deg);
              --tw-skew-y: skewY(0deg);
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("skew-x-0") {
          @include assert {
            @include output {
              @include skew-x-0;
            }

            @include expect {
              --tw-skew-x: skewX(0deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("skew-y-0") {
          @include assert {
            @include output {
              @include skew-y-0;
            }

            @include expect {
              --tw-skew-y: skewY(0deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("skew-1") {
          @include assert {
            @include output {
              @include skew-1;
            }

            @include expect {
              --tw-skew-x: skewX(1deg);
              --tw-skew-y: skewY(1deg);
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("skew-x-1") {
          @include assert {
            @include output {
              @include skew-x-1;
            }

            @include expect {
              --tw-skew-x: skewX(1deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("skew-y-1") {
          @include assert {
            @include output {
              @include skew-y-1;
            }

            @include expect {
              --tw-skew-y: skewY(1deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("skew-2") {
          @include assert {
            @include output {
              @include skew-2;
            }

            @include expect {
              --tw-skew-x: skewX(2deg);
              --tw-skew-y: skewY(2deg);
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("skew-x-2") {
          @include assert {
            @include output {
              @include skew-x-2;
            }

            @include expect {
              --tw-skew-x: skewX(2deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("skew-y-2") {
          @include assert {
            @include output {
              @include skew-y-2;
            }

            @include expect {
              --tw-skew-y: skewY(2deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("skew-3") {
          @include assert {
            @include output {
              @include skew-3;
            }

            @include expect {
              --tw-skew-x: skewX(3deg);
              --tw-skew-y: skewY(3deg);
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("skew-x-3") {
          @include assert {
            @include output {
              @include skew-x-3;
            }

            @include expect {
              --tw-skew-x: skewX(3deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("skew-y-3") {
          @include assert {
            @include output {
              @include skew-y-3;
            }

            @include expect {
              --tw-skew-y: skewY(3deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("skew-6") {
          @include assert {
            @include output {
              @include skew-6;
            }

            @include expect {
              --tw-skew-x: skewX(6deg);
              --tw-skew-y: skewY(6deg);
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("skew-x-6") {
          @include assert {
            @include output {
              @include skew-x-6;
            }

            @include expect {
              --tw-skew-x: skewX(6deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("skew-y-6") {
          @include assert {
            @include output {
              @include skew-y-6;
            }

            @include expect {
              --tw-skew-y: skewY(6deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("skew-12") {
          @include assert {
            @include output {
              @include skew-12;
            }

            @include expect {
              --tw-skew-x: skewX(12deg);
              --tw-skew-y: skewY(12deg);
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("skew-x-12") {
          @include assert {
            @include output {
              @include skew-x-12;
            }

            @include expect {
              --tw-skew-x: skewX(12deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("skew-y-12") {
          @include assert {
            @include output {
              @include skew-y-12;
            }

            @include expect {
              --tw-skew-y: skewY(12deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }
      }

      @include describe("Custom") {
        @include it("skew-(17deg)") {
          @include assert {
            @include output {
              @include skew-(17deg);
            }

            @include expect {
              --tw-skew-x: skewX(17deg);
              --tw-skew-y: skewY(17deg);
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("skew-x-(17deg)") {
          @include assert {
            @include output {
              @include skew-x-(17deg);
            }

            @include expect {
              --tw-skew-x: skewX(17deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("skew-y-(17deg)") {
          @include assert {
            @include output {
              @include skew-y-(17deg);
            }

            @include expect {
              --tw-skew-y: skewY(17deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }
      }
    }

    @include describe("Negative") {
      @include describe("Basic") {
        @include it("-skew-0") {
          @include assert {
            @include output {
              @include \-skew-0;
            }

            @include expect {
              --tw-skew-x: skewX(0deg);
              --tw-skew-y: skewY(0deg);
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("-skew-x-0") {
          @include assert {
            @include output {
              @include \-skew-x-0;
            }

            @include expect {
              --tw-skew-x: skewX(0deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("-skew-y-0") {
          @include assert {
            @include output {
              @include \-skew-y-0;
            }

            @include expect {
              --tw-skew-y: skewY(0deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("-skew-1") {
          @include assert {
            @include output {
              @include \-skew-1;
            }

            @include expect {
              --tw-skew-x: skewX(-1deg);
              --tw-skew-y: skewY(-1deg);
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("-skew-x-1") {
          @include assert {
            @include output {
              @include \-skew-x-1;
            }

            @include expect {
              --tw-skew-x: skewX(-1deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("-skew-y-1") {
          @include assert {
            @include output {
              @include \-skew-y-1;
            }

            @include expect {
              --tw-skew-y: skewY(-1deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("-skew-2") {
          @include assert {
            @include output {
              @include \-skew-2;
            }

            @include expect {
              --tw-skew-x: skewX(-2deg);
              --tw-skew-y: skewY(-2deg);
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("-skew-x-2") {
          @include assert {
            @include output {
              @include \-skew-x-2;
            }

            @include expect {
              --tw-skew-x: skewX(-2deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("-skew-y-2") {
          @include assert {
            @include output {
              @include \-skew-y-2;
            }

            @include expect {
              --tw-skew-y: skewY(-2deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("-skew-3") {
          @include assert {
            @include output {
              @include \-skew-3;
            }

            @include expect {
              --tw-skew-x: skewX(-3deg);
              --tw-skew-y: skewY(-3deg);
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("-skew-x-3") {
          @include assert {
            @include output {
              @include \-skew-x-3;
            }

            @include expect {
              --tw-skew-x: skewX(-3deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("-skew-y-3") {
          @include assert {
            @include output {
              @include \-skew-y-3;
            }

            @include expect {
              --tw-skew-y: skewY(-3deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("-skew-6") {
          @include assert {
            @include output {
              @include \-skew-6;
            }

            @include expect {
              --tw-skew-x: skewX(-6deg);
              --tw-skew-y: skewY(-6deg);
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("-skew-x-6") {
          @include assert {
            @include output {
              @include \-skew-x-6;
            }

            @include expect {
              --tw-skew-x: skewX(-6deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("-skew-y-6") {
          @include assert {
            @include output {
              @include \-skew-y-6;
            }

            @include expect {
              --tw-skew-y: skewY(-6deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("-skew-12") {
          @include assert {
            @include output {
              @include \-skew-12;
            }

            @include expect {
              --tw-skew-x: skewX(-12deg);
              --tw-skew-y: skewY(-12deg);
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("-skew-x-12") {
          @include assert {
            @include output {
              @include \-skew-x-12;
            }

            @include expect {
              --tw-skew-x: skewX(-12deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("-skew-y-12") {
          @include assert {
            @include output {
              @include \-skew-y-12;
            }

            @include expect {
              --tw-skew-y: skewY(-12deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }
      }

      @include describe("Custom") {
        @include it("-skew-(17deg)") {
          @include assert {
            @include output {
              @include \-skew-(17deg);
            }

            @include expect {
              --tw-skew-x: skewX(-17deg);
              --tw-skew-y: skewY(-17deg);
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("-skew-x-(17deg)") {
          @include assert {
            @include output {
              @include \-skew-x-(17deg);
            }

            @include expect {
              --tw-skew-x: skewX(-17deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }

        @include it("-skew-y-(17deg)") {
          @include assert {
            @include output {
              @include \-skew-y-(17deg);
            }

            @include expect {
              --tw-skew-y: skewY(-17deg) !important;
              transform: var(--tw-rotate-x,) var(--tw-rotate-y,)
                var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
            }
          }
        }
      }
    }
  }
}
