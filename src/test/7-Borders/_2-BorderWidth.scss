@use "true" as *;
@use "../style" as *;

@include describe("7-Borders") {
  @include describe("2-Border Width") {
    @include describe("Basic") {
      @include it("border") {
        @include assert {
          @include output {
            @include border;
          }

          @include expect {
            border-style: var(--tw-border-style);
            border-width: 1px;
          }
        }
      }

      @include it("border-0") {
        @include assert {
          @include output {
            @include border-0;
          }

          @include expect {
            border-style: var(--tw-border-style);
            border-width: 0px;
          }
        }
      }

      @include it("border-2") {
        @include assert {
          @include output {
            @include border-2;
          }

          @include expect {
            border-style: var(--tw-border-style);
            border-width: 2px;
          }
        }
      }

      @include it("border-4") {
        @include assert {
          @include output {
            @include border-4;
          }

          @include expect {
            border-style: var(--tw-border-style);
            border-width: 4px;
          }
        }
      }

      @include it("border-8") {
        @include assert {
          @include output {
            @include border-8;
          }

          @include expect {
            border-style: var(--tw-border-style);
            border-width: 8px;
          }
        }
      }

      @include it("border-x") {
        @include assert {
          @include output {
            @include border-x;
          }

          @include expect {
            border-inline-style: var(--tw-border-style);
            border-inline-width: 1px;
          }
        }
      }

      @include it("border-x-0") {
        @include assert {
          @include output {
            @include border-x-0;
          }

          @include expect {
            border-inline-style: var(--tw-border-style);
            border-inline-width: 0px;
          }
        }
      }

      @include it("border-x-2") {
        @include assert {
          @include output {
            @include border-x-2;
          }

          @include expect {
            border-inline-style: var(--tw-border-style);
            border-inline-width: 2px;
          }
        }
      }

      @include it("border-x-4") {
        @include assert {
          @include output {
            @include border-x-4;
          }

          @include expect {
            border-inline-style: var(--tw-border-style);
            border-inline-width: 4px;
          }
        }
      }

      @include it("border-x-8") {
        @include assert {
          @include output {
            @include border-x-8;
          }

          @include expect {
            border-inline-style: var(--tw-border-style);
            border-inline-width: 8px;
          }
        }
      }

      @include it("border-y") {
        @include assert {
          @include output {
            @include border-y;
          }

          @include expect {
            border-block-style: var(--tw-border-style);
            border-block-width: 1px;
          }
        }
      }

      @include it("border-y-0") {
        @include assert {
          @include output {
            @include border-y-0;
          }

          @include expect {
            border-block-style: var(--tw-border-style);
            border-block-width: 0px;
          }
        }
      }

      @include it("border-y-2") {
        @include assert {
          @include output {
            @include border-y-2;
          }

          @include expect {
            border-block-style: var(--tw-border-style);
            border-block-width: 2px;
          }
        }
      }

      @include it("border-y-4") {
        @include assert {
          @include output {
            @include border-y-4;
          }

          @include expect {
            border-block-style: var(--tw-border-style);
            border-block-width: 4px;
          }
        }
      }

      @include it("border-y-8") {
        @include assert {
          @include output {
            @include border-y-8;
          }

          @include expect {
            border-block-style: var(--tw-border-style);
            border-block-width: 8px;
          }
        }
      }

      @include it("border-s") {
        @include assert {
          @include output {
            @include border-s;
          }

          @include expect {
            border-inline-start-style: var(--tw-border-style);
            border-inline-start-width: 1px;
          }
        }
      }

      @include it("border-s-0") {
        @include assert {
          @include output {
            @include border-s-0;
          }

          @include expect {
            border-inline-start-style: var(--tw-border-style);
            border-inline-start-width: 0px;
          }
        }
      }

      @include it("border-s-2") {
        @include assert {
          @include output {
            @include border-s-2;
          }

          @include expect {
            border-inline-start-style: var(--tw-border-style);
            border-inline-start-width: 2px;
          }
        }
      }

      @include it("border-s-4") {
        @include assert {
          @include output {
            @include border-s-4;
          }

          @include expect {
            border-inline-start-style: var(--tw-border-style);
            border-inline-start-width: 4px;
          }
        }
      }

      @include it("border-s-8") {
        @include assert {
          @include output {
            @include border-s-8;
          }

          @include expect {
            border-inline-start-style: var(--tw-border-style);
            border-inline-start-width: 8px;
          }
        }
      }

      @include it("border-e") {
        @include assert {
          @include output {
            @include border-e;
          }

          @include expect {
            border-inline-end-style: var(--tw-border-style);
            border-inline-end-width: 1px;
          }
        }
      }

      @include it("border-e-0") {
        @include assert {
          @include output {
            @include border-e-0;
          }

          @include expect {
            border-inline-end-style: var(--tw-border-style);
            border-inline-end-width: 0px;
          }
        }
      }

      @include it("border-e-2") {
        @include assert {
          @include output {
            @include border-e-2;
          }

          @include expect {
            border-inline-end-style: var(--tw-border-style);
            border-inline-end-width: 2px;
          }
        }
      }

      @include it("border-e-4") {
        @include assert {
          @include output {
            @include border-e-4;
          }

          @include expect {
            border-inline-end-style: var(--tw-border-style);
            border-inline-end-width: 4px;
          }
        }
      }

      @include it("border-e-8") {
        @include assert {
          @include output {
            @include border-e-8;
          }

          @include expect {
            border-inline-end-style: var(--tw-border-style);
            border-inline-end-width: 8px;
          }
        }
      }

      @include it("border-t") {
        @include assert {
          @include output {
            @include border-t;
          }

          @include expect {
            border-top-style: var(--tw-border-style);
            border-top-width: 1px;
          }
        }
      }

      @include it("border-t-0") {
        @include assert {
          @include output {
            @include border-t-0;
          }

          @include expect {
            border-top-style: var(--tw-border-style);
            border-top-width: 0px;
          }
        }
      }

      @include it("border-t-2") {
        @include assert {
          @include output {
            @include border-t-2;
          }

          @include expect {
            border-top-style: var(--tw-border-style);
            border-top-width: 2px;
          }
        }
      }

      @include it("border-t-4") {
        @include assert {
          @include output {
            @include border-t-4;
          }

          @include expect {
            border-top-style: var(--tw-border-style);
            border-top-width: 4px;
          }
        }
      }

      @include it("border-t-8") {
        @include assert {
          @include output {
            @include border-t-8;
          }

          @include expect {
            border-top-style: var(--tw-border-style);
            border-top-width: 8px;
          }
        }
      }

      @include it("border-r") {
        @include assert {
          @include output {
            @include border-r;
          }

          @include expect {
            border-right-style: var(--tw-border-style);
            border-right-width: 1px;
          }
        }
      }

      @include it("border-r-0") {
        @include assert {
          @include output {
            @include border-r-0;
          }

          @include expect {
            border-right-style: var(--tw-border-style);
            border-right-width: 0px;
          }
        }
      }

      @include it("border-r-2") {
        @include assert {
          @include output {
            @include border-r-2;
          }

          @include expect {
            border-right-style: var(--tw-border-style);
            border-right-width: 2px;
          }
        }
      }

      @include it("border-r-4") {
        @include assert {
          @include output {
            @include border-r-4;
          }

          @include expect {
            border-right-style: var(--tw-border-style);
            border-right-width: 4px;
          }
        }
      }

      @include it("border-r-8") {
        @include assert {
          @include output {
            @include border-r-8;
          }

          @include expect {
            border-right-style: var(--tw-border-style);
            border-right-width: 8px;
          }
        }
      }

      @include it("border-b") {
        @include assert {
          @include output {
            @include border-b;
          }

          @include expect {
            border-bottom-style: var(--tw-border-style);
            border-bottom-width: 1px;
          }
        }
      }

      @include it("border-b-0") {
        @include assert {
          @include output {
            @include border-b-0;
          }

          @include expect {
            border-bottom-style: var(--tw-border-style);
            border-bottom-width: 0px;
          }
        }
      }

      @include it("border-b-2") {
        @include assert {
          @include output {
            @include border-b-2;
          }

          @include expect {
            border-bottom-style: var(--tw-border-style);
            border-bottom-width: 2px;
          }
        }
      }

      @include it("border-b-4") {
        @include assert {
          @include output {
            @include border-b-4;
          }

          @include expect {
            border-bottom-style: var(--tw-border-style);
            border-bottom-width: 4px;
          }
        }
      }

      @include it("border-b-8") {
        @include assert {
          @include output {
            @include border-b-8;
          }

          @include expect {
            border-bottom-style: var(--tw-border-style);
            border-bottom-width: 8px;
          }
        }
      }

      @include it("border-l") {
        @include assert {
          @include output {
            @include border-l;
          }

          @include expect {
            border-left-style: var(--tw-border-style);
            border-left-width: 1px;
          }
        }
      }

      @include it("border-l-0") {
        @include assert {
          @include output {
            @include border-l-0;
          }

          @include expect {
            border-left-style: var(--tw-border-style);
            border-left-width: 0px;
          }
        }
      }

      @include it("border-l-2") {
        @include assert {
          @include output {
            @include border-l-2;
          }

          @include expect {
            border-left-style: var(--tw-border-style);
            border-left-width: 2px;
          }
        }
      }

      @include it("border-l-4") {
        @include assert {
          @include output {
            @include border-l-4;
          }

          @include expect {
            border-left-style: var(--tw-border-style);
            border-left-width: 4px;
          }
        }
      }

      @include it("border-l-8") {
        @include assert {
          @include output {
            @include border-l-8;
          }

          @include expect {
            border-left-style: var(--tw-border-style);
            border-left-width: 8px;
          }
        }
      }

      @include it("divide-x") {
        @include assert {
          @include output {
            @include divide-x;
          }

          @include expect {
            :where(& > :not(:last-child)) {
              --tw-divide-x-reverse: 0;
              border-inline-style: var(--tw-border-style);
              border-inline-start-width: calc(1px * var(--tw-divide-x-reverse));
              border-inline-end-width: calc(
                1px * (1 - var(--tw-divide-x-reverse))
              );
            }
          }
        }
      }

      @include it("divide-x-0") {
        @include assert {
          @include output {
            @include divide-x-0;
          }

          @include expect {
            :where(& > :not(:last-child)) {
              --tw-divide-x-reverse: 0;
              border-inline-style: var(--tw-border-style);
              border-inline-start-width: calc(0px * var(--tw-divide-x-reverse));
              border-inline-end-width: calc(
                0px * (1 - var(--tw-divide-x-reverse))
              );
            }
          }
        }
      }

      @include it("divide-x-2") {
        @include assert {
          @include output {
            @include divide-x-2;
          }

          @include expect {
            :where(& > :not(:last-child)) {
              --tw-divide-x-reverse: 0;
              border-inline-style: var(--tw-border-style);
              border-inline-start-width: calc(2px * var(--tw-divide-x-reverse));
              border-inline-end-width: calc(
                2px * (1 - var(--tw-divide-x-reverse))
              );
            }
          }
        }
      }

      @include it("divide-x-4") {
        @include assert {
          @include output {
            @include divide-x-4;
          }

          @include expect {
            :where(& > :not(:last-child)) {
              --tw-divide-x-reverse: 0;
              border-inline-style: var(--tw-border-style);
              border-inline-start-width: calc(4px * var(--tw-divide-x-reverse));
              border-inline-end-width: calc(
                4px * (1 - var(--tw-divide-x-reverse))
              );
            }
          }
        }
      }

      @include it("divide-x-8") {
        @include assert {
          @include output {
            @include divide-x-8;
          }

          @include expect {
            :where(& > :not(:last-child)) {
              --tw-divide-x-reverse: 0;
              border-inline-style: var(--tw-border-style);
              border-inline-start-width: calc(8px * var(--tw-divide-x-reverse));
              border-inline-end-width: calc(
                8px * (1 - var(--tw-divide-x-reverse))
              );
            }
          }
        }
      }

      @include it("divide-y") {
        @include assert {
          @include output {
            @include divide-y;
          }

          @include expect {
            :where(& > :not(:last-child)) {
              --tw-divide-y-reverse: 0;
              border-bottom-style: var(--tw-border-style);
              border-top-style: var(--tw-border-style);
              border-top-width: calc(1px * var(--tw-divide-y-reverse));
              border-bottom-width: calc(1px * (1 - var(--tw-divide-y-reverse)));
            }
          }
        }
      }

      @include it("divide-y-0") {
        @include assert {
          @include output {
            @include divide-y-0;
          }

          @include expect {
            :where(& > :not(:last-child)) {
              --tw-divide-y-reverse: 0;
              border-bottom-style: var(--tw-border-style);
              border-top-style: var(--tw-border-style);
              border-top-width: calc(0px * var(--tw-divide-y-reverse));
              border-bottom-width: calc(0px * (1 - var(--tw-divide-y-reverse)));
            }
          }
        }
      }

      @include it("divide-y-2") {
        @include assert {
          @include output {
            @include divide-y-2;
          }

          @include expect {
            :where(& > :not(:last-child)) {
              --tw-divide-y-reverse: 0;
              border-bottom-style: var(--tw-border-style);
              border-top-style: var(--tw-border-style);
              border-top-width: calc(2px * var(--tw-divide-y-reverse));
              border-bottom-width: calc(2px * (1 - var(--tw-divide-y-reverse)));
            }
          }
        }
      }

      @include it("divide-y-4") {
        @include assert {
          @include output {
            @include divide-y-4;
          }

          @include expect {
            :where(& > :not(:last-child)) {
              --tw-divide-y-reverse: 0;
              border-bottom-style: var(--tw-border-style);
              border-top-style: var(--tw-border-style);
              border-top-width: calc(4px * var(--tw-divide-y-reverse));
              border-bottom-width: calc(4px * (1 - var(--tw-divide-y-reverse)));
            }
          }
        }
      }

      @include it("divide-y-8") {
        @include assert {
          @include output {
            @include divide-y-8;
          }

          @include expect {
            :where(& > :not(:last-child)) {
              --tw-divide-y-reverse: 0;
              border-bottom-style: var(--tw-border-style);
              border-top-style: var(--tw-border-style);
              border-top-width: calc(8px * var(--tw-divide-y-reverse));
              border-bottom-width: calc(8px * (1 - var(--tw-divide-y-reverse)));
            }
          }
        }
      }

      @include it("divide-x-reverse") {
        @include assert {
          @include output {
            @include divide-x-reverse;
          }

          @include expect {
            :where(& > :not(:last-child)) {
              --tw-divide-x-reverse: 1;
            }
          }
        }
      }

      @include it("divide-y-reverse") {
        @include assert {
          @include output {
            @include divide-y-reverse;
          }

          @include expect {
            :where(& > :not(:last-child)) {
              --tw-divide-y-reverse: 1;
            }
          }
        }
      }
    }

    @include describe("Custom") {
      @include it("border-(3px)") {
        @include assert {
          @include output {
            @include border-(3px);
          }

          @include expect {
            border-style: var(--tw-border-style);
            border-width: 3px;
          }
        }
      }

      @include it("border-x-(3px)") {
        @include assert {
          @include output {
            @include border-x-(3px);
          }

          @include expect {
            border-inline-style: var(--tw-border-style);
            border-inline-width: 3px;
          }
        }
      }

      @include it("border-y-(3px)") {
        @include assert {
          @include output {
            @include border-y-(3px);
          }

          @include expect {
            border-block-style: var(--tw-border-style);
            border-block-width: 3px;
          }
        }
      }

      @include it("border-s-(3px)") {
        @include assert {
          @include output {
            @include border-s-(3px);
          }

          @include expect {
            border-inline-start-style: var(--tw-border-style);
            border-inline-start-width: 3px;
          }
        }
      }

      @include it("border-e-(3px)") {
        @include assert {
          @include output {
            @include border-e-(3px);
          }

          @include expect {
            border-inline-end-style: var(--tw-border-style);
            border-inline-end-width: 3px;
          }
        }
      }

      @include it("border-t-(3px)") {
        @include assert {
          @include output {
            @include border-t-(3px);
          }

          @include expect {
            border-top-style: var(--tw-border-style);
            border-top-width: 3px;
          }
        }
      }

      @include it("border-r-(3px)") {
        @include assert {
          @include output {
            @include border-r-(3px);
          }

          @include expect {
            border-right-style: var(--tw-border-style);
            border-right-width: 3px;
          }
        }
      }

      @include it("border-b-(3px)") {
        @include assert {
          @include output {
            @include border-b-(3px);
          }

          @include expect {
            border-bottom-style: var(--tw-border-style);
            border-bottom-width: 3px;
          }
        }
      }

      @include it("border-l-(3px)") {
        @include assert {
          @include output {
            @include border-l-(3px);
          }

          @include expect {
            border-left-style: var(--tw-border-style);
            border-left-width: 3px;
          }
        }
      }

      @include it("divide-x-(3px)") {
        @include assert {
          @include output {
            @include divide-x-(3px);
          }

          @include expect {
            :where(& > :not(:last-child)) {
              --tw-divide-x-reverse: 0;
              border-inline-style: var(--tw-border-style);
              border-inline-start-width: calc(3px * var(--tw-divide-x-reverse));
              border-inline-end-width: calc(
                3px * (1 - var(--tw-divide-x-reverse))
              );
            }
          }
        }
      }

      @include it("divide-y-(3px)") {
        @include assert {
          @include output {
            @include divide-y-(3px);
          }

          @include expect {
            :where(& > :not(:last-child)) {
              --tw-divide-y-reverse: 0;
              border-bottom-style: var(--tw-border-style);
              border-top-style: var(--tw-border-style);
              border-top-width: calc(3px * var(--tw-divide-y-reverse));
              border-bottom-width: calc(3px * (1 - var(--tw-divide-y-reverse)));
            }
          }
        }
      }
    }
  }
}
