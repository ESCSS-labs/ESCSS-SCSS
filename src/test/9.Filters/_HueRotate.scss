@include describe('9.Filters') {
  @include describe('Hue Rotate') {
    @include describe('Basic') {
      @include it('hue-rotate-0') {
        @include assert {
          @include output {
            @include hue-rotate-0;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(0deg);
          }
        }
      }

      @include it('hue-rotate-15') {
        @include assert {
          @include output {
            @include hue-rotate-15;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(15deg);
          }
        }
      }

      @include it('hue-rotate-30') {
        @include assert {
          @include output {
            @include hue-rotate-30;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(30deg);
          }
        }
      }

      @include it('hue-rotate-60') {
        @include assert {
          @include output {
            @include hue-rotate-60;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(60deg);
          }
        }
      }

      @include it('hue-rotate-90') {
        @include assert {
          @include output {
            @include hue-rotate-90;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(90deg);
          }
        }
      }

      @include it('hue-rotate-180') {
        @include assert {
          @include output {
            @include hue-rotate-180;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(180deg);
          }
        }
      }

      @include it('-hue-rotate-0') {
        @include assert {
          @include output {
            @include \-hue-rotate-0;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(-0deg);
          }
        }
      }

      @include it('-hue-rotate-15') {
        @include assert {
          @include output {
            @include \-hue-rotate-15;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(-15deg);
          }
        }
      }

      @include it('-hue-rotate-30') {
        @include assert {
          @include output {
            @include \-hue-rotate-30;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(-30deg);
          }
        }
      }

      @include it('-hue-rotate-60') {
        @include assert {
          @include output {
            @include \-hue-rotate-60;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(-60deg);
          }
        }
      }

      @include it('-hue-rotate-90') {
        @include assert {
          @include output {
            @include \-hue-rotate-90;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(-90deg);
          }
        }
      }

      @include it('-hue-rotate-180') {
        @include assert {
          @include output {
            @include \-hue-rotate-180;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(-180deg);
          }
        }
      }
    }

    @include describe('Rwd') {
      @include it('hue-rotate-0') {
        @include assert {
          @include output {
            @include hue-rotate-0;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(0deg);
          }
        }
      }

      @include it('hue-rotate-15') {
        @include assert {
          @include output {
            @include hue-rotate-15;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(15deg);
          }
        }
      }

      @include it('hue-rotate-30') {
        @include assert {
          @include output {
            @include hue-rotate-30;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(30deg);
          }
        }
      }

      @include it('hue-rotate-60') {
        @include assert {
          @include output {
            @include hue-rotate-60;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(60deg);
          }
        }
      }

      @include it('hue-rotate-90') {
        @include assert {
          @include output {
            @include hue-rotate-90;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(90deg);
          }
        }
      }

      @include it('hue-rotate-180') {
        @include assert {
          @include output {
            @include hue-rotate-180;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(180deg);
          }
        }
      }

      @include it('-hue-rotate-0') {
        @include assert {
          @include output {
            @include \-hue-rotate-0;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(-0deg);
          }
        }
      }

      @include it('-hue-rotate-15') {
        @include assert {
          @include output {
            @include \-hue-rotate-15;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(-15deg);
          }
        }
      }

      @include it('-hue-rotate-30') {
        @include assert {
          @include output {
            @include \-hue-rotate-30;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(-30deg);
          }
        }
      }

      @include it('-hue-rotate-60') {
        @include assert {
          @include output {
            @include \-hue-rotate-60;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(-60deg);
          }
        }
      }

      @include it('-hue-rotate-90') {
        @include assert {
          @include output {
            @include \-hue-rotate-90;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(-90deg);
          }
        }
      }

      @include it('-hue-rotate-180') {
        @include assert {
          @include output {
            @include \-hue-rotate-180;
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(-180deg);
          }
        }
      }

      @include it('sm\:hue-rotate-0') {
        @include assert {
          @include output {
            @include sm\:hue-rotate-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              filter: hue-rotate(0deg);
            }
          }
        }
      }

      @include it('sm\:hue-rotate-15') {
        @include assert {
          @include output {
            @include sm\:hue-rotate-15;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              filter: hue-rotate(15deg);
            }
          }
        }
      }

      @include it('sm\:hue-rotate-30') {
        @include assert {
          @include output {
            @include sm\:hue-rotate-30;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              filter: hue-rotate(30deg);
            }
          }
        }
      }

      @include it('sm\:hue-rotate-60') {
        @include assert {
          @include output {
            @include sm\:hue-rotate-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              filter: hue-rotate(60deg);
            }
          }
        }
      }

      @include it('sm\:hue-rotate-90') {
        @include assert {
          @include output {
            @include sm\:hue-rotate-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              filter: hue-rotate(90deg);
            }
          }
        }
      }

      @include it('sm\:hue-rotate-180') {
        @include assert {
          @include output {
            @include sm\:hue-rotate-180;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              filter: hue-rotate(180deg);
            }
          }
        }
      }

      @include it('sm\:-hue-rotate-0') {
        @include assert {
          @include output {
            @include sm\:-hue-rotate-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              filter: hue-rotate(-0deg);
            }
          }
        }
      }

      @include it('sm\:-hue-rotate-15') {
        @include assert {
          @include output {
            @include sm\:-hue-rotate-15;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              filter: hue-rotate(-15deg);
            }
          }
        }
      }

      @include it('sm\:-hue-rotate-30') {
        @include assert {
          @include output {
            @include sm\:-hue-rotate-30;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              filter: hue-rotate(-30deg);
            }
          }
        }
      }

      @include it('sm\:-hue-rotate-60') {
        @include assert {
          @include output {
            @include sm\:-hue-rotate-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              filter: hue-rotate(-60deg);
            }
          }
        }
      }

      @include it('sm\:-hue-rotate-90') {
        @include assert {
          @include output {
            @include sm\:-hue-rotate-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              filter: hue-rotate(-90deg);
            }
          }
        }
      }

      @include it('sm\:-hue-rotate-180') {
        @include assert {
          @include output {
            @include sm\:-hue-rotate-180;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              filter: hue-rotate(-180deg);
            }
          }
        }
      }

      @include it('md\:hue-rotate-0') {
        @include assert {
          @include output {
            @include md\:hue-rotate-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              filter: hue-rotate(0deg);
            }
          }
        }
      }

      @include it('md\:hue-rotate-15') {
        @include assert {
          @include output {
            @include md\:hue-rotate-15;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              filter: hue-rotate(15deg);
            }
          }
        }
      }

      @include it('md\:hue-rotate-30') {
        @include assert {
          @include output {
            @include md\:hue-rotate-30;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              filter: hue-rotate(30deg);
            }
          }
        }
      }

      @include it('md\:hue-rotate-60') {
        @include assert {
          @include output {
            @include md\:hue-rotate-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              filter: hue-rotate(60deg);
            }
          }
        }
      }

      @include it('md\:hue-rotate-90') {
        @include assert {
          @include output {
            @include md\:hue-rotate-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              filter: hue-rotate(90deg);
            }
          }
        }
      }

      @include it('md\:hue-rotate-180') {
        @include assert {
          @include output {
            @include md\:hue-rotate-180;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              filter: hue-rotate(180deg);
            }
          }
        }
      }

      @include it('md\:-hue-rotate-0') {
        @include assert {
          @include output {
            @include md\:-hue-rotate-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              filter: hue-rotate(-0deg);
            }
          }
        }
      }

      @include it('md\:-hue-rotate-15') {
        @include assert {
          @include output {
            @include md\:-hue-rotate-15;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              filter: hue-rotate(-15deg);
            }
          }
        }
      }

      @include it('md\:-hue-rotate-30') {
        @include assert {
          @include output {
            @include md\:-hue-rotate-30;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              filter: hue-rotate(-30deg);
            }
          }
        }
      }

      @include it('md\:-hue-rotate-60') {
        @include assert {
          @include output {
            @include md\:-hue-rotate-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              filter: hue-rotate(-60deg);
            }
          }
        }
      }

      @include it('md\:-hue-rotate-90') {
        @include assert {
          @include output {
            @include md\:-hue-rotate-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              filter: hue-rotate(-90deg);
            }
          }
        }
      }

      @include it('md\:-hue-rotate-180') {
        @include assert {
          @include output {
            @include md\:-hue-rotate-180;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              filter: hue-rotate(-180deg);
            }
          }
        }
      }

      @include it('lg\:hue-rotate-0') {
        @include assert {
          @include output {
            @include lg\:hue-rotate-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              filter: hue-rotate(0deg);
            }
          }
        }
      }

      @include it('lg\:hue-rotate-15') {
        @include assert {
          @include output {
            @include lg\:hue-rotate-15;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              filter: hue-rotate(15deg);
            }
          }
        }
      }

      @include it('lg\:hue-rotate-30') {
        @include assert {
          @include output {
            @include lg\:hue-rotate-30;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              filter: hue-rotate(30deg);
            }
          }
        }
      }

      @include it('lg\:hue-rotate-60') {
        @include assert {
          @include output {
            @include lg\:hue-rotate-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              filter: hue-rotate(60deg);
            }
          }
        }
      }

      @include it('lg\:hue-rotate-90') {
        @include assert {
          @include output {
            @include lg\:hue-rotate-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              filter: hue-rotate(90deg);
            }
          }
        }
      }

      @include it('lg\:hue-rotate-180') {
        @include assert {
          @include output {
            @include lg\:hue-rotate-180;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              filter: hue-rotate(180deg);
            }
          }
        }
      }

      @include it('lg\:-hue-rotate-0') {
        @include assert {
          @include output {
            @include lg\:-hue-rotate-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              filter: hue-rotate(-0deg);
            }
          }
        }
      }

      @include it('lg\:-hue-rotate-15') {
        @include assert {
          @include output {
            @include lg\:-hue-rotate-15;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              filter: hue-rotate(-15deg);
            }
          }
        }
      }

      @include it('lg\:-hue-rotate-30') {
        @include assert {
          @include output {
            @include lg\:-hue-rotate-30;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              filter: hue-rotate(-30deg);
            }
          }
        }
      }

      @include it('lg\:-hue-rotate-60') {
        @include assert {
          @include output {
            @include lg\:-hue-rotate-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              filter: hue-rotate(-60deg);
            }
          }
        }
      }

      @include it('lg\:-hue-rotate-90') {
        @include assert {
          @include output {
            @include lg\:-hue-rotate-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              filter: hue-rotate(-90deg);
            }
          }
        }
      }

      @include it('lg\:-hue-rotate-180') {
        @include assert {
          @include output {
            @include lg\:-hue-rotate-180;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              filter: hue-rotate(-180deg);
            }
          }
        }
      }

      @include it('xl\:hue-rotate-0') {
        @include assert {
          @include output {
            @include xl\:hue-rotate-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              filter: hue-rotate(0deg);
            }
          }
        }
      }

      @include it('xl\:hue-rotate-15') {
        @include assert {
          @include output {
            @include xl\:hue-rotate-15;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              filter: hue-rotate(15deg);
            }
          }
        }
      }

      @include it('xl\:hue-rotate-30') {
        @include assert {
          @include output {
            @include xl\:hue-rotate-30;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              filter: hue-rotate(30deg);
            }
          }
        }
      }

      @include it('xl\:hue-rotate-60') {
        @include assert {
          @include output {
            @include xl\:hue-rotate-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              filter: hue-rotate(60deg);
            }
          }
        }
      }

      @include it('xl\:hue-rotate-90') {
        @include assert {
          @include output {
            @include xl\:hue-rotate-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              filter: hue-rotate(90deg);
            }
          }
        }
      }

      @include it('xl\:hue-rotate-180') {
        @include assert {
          @include output {
            @include xl\:hue-rotate-180;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              filter: hue-rotate(180deg);
            }
          }
        }
      }

      @include it('xl\:-hue-rotate-0') {
        @include assert {
          @include output {
            @include xl\:-hue-rotate-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              filter: hue-rotate(-0deg);
            }
          }
        }
      }

      @include it('xl\:-hue-rotate-15') {
        @include assert {
          @include output {
            @include xl\:-hue-rotate-15;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              filter: hue-rotate(-15deg);
            }
          }
        }
      }

      @include it('xl\:-hue-rotate-30') {
        @include assert {
          @include output {
            @include xl\:-hue-rotate-30;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              filter: hue-rotate(-30deg);
            }
          }
        }
      }

      @include it('xl\:-hue-rotate-60') {
        @include assert {
          @include output {
            @include xl\:-hue-rotate-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              filter: hue-rotate(-60deg);
            }
          }
        }
      }

      @include it('xl\:-hue-rotate-90') {
        @include assert {
          @include output {
            @include xl\:-hue-rotate-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              filter: hue-rotate(-90deg);
            }
          }
        }
      }

      @include it('xl\:-hue-rotate-180') {
        @include assert {
          @include output {
            @include xl\:-hue-rotate-180;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              filter: hue-rotate(-180deg);
            }
          }
        }
      }

      @include it('2xl\:hue-rotate-0') {
        @include assert {
          @include output {
            @include \2xl\:hue-rotate-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              filter: hue-rotate(0deg);
            }
          }
        }
      }

      @include it('2xl\:hue-rotate-15') {
        @include assert {
          @include output {
            @include \2xl\:hue-rotate-15;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              filter: hue-rotate(15deg);
            }
          }
        }
      }

      @include it('2xl\:hue-rotate-30') {
        @include assert {
          @include output {
            @include \2xl\:hue-rotate-30;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              filter: hue-rotate(30deg);
            }
          }
        }
      }

      @include it('2xl\:hue-rotate-60') {
        @include assert {
          @include output {
            @include \2xl\:hue-rotate-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              filter: hue-rotate(60deg);
            }
          }
        }
      }

      @include it('2xl\:hue-rotate-90') {
        @include assert {
          @include output {
            @include \2xl\:hue-rotate-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              filter: hue-rotate(90deg);
            }
          }
        }
      }

      @include it('2xl\:hue-rotate-180') {
        @include assert {
          @include output {
            @include \2xl\:hue-rotate-180;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              filter: hue-rotate(180deg);
            }
          }
        }
      }

      @include it('2xl\:-hue-rotate-0') {
        @include assert {
          @include output {
            @include \2xl\:-hue-rotate-0;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              filter: hue-rotate(-0deg);
            }
          }
        }
      }

      @include it('2xl\:-hue-rotate-15') {
        @include assert {
          @include output {
            @include \2xl\:-hue-rotate-15;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              filter: hue-rotate(-15deg);
            }
          }
        }
      }

      @include it('2xl\:-hue-rotate-30') {
        @include assert {
          @include output {
            @include \2xl\:-hue-rotate-30;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              filter: hue-rotate(-30deg);
            }
          }
        }
      }

      @include it('2xl\:-hue-rotate-60') {
        @include assert {
          @include output {
            @include \2xl\:-hue-rotate-60;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              filter: hue-rotate(-60deg);
            }
          }
        }
      }

      @include it('2xl\:-hue-rotate-90') {
        @include assert {
          @include output {
            @include \2xl\:-hue-rotate-90;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              filter: hue-rotate(-90deg);
            }
          }
        }
      }

      @include it('2xl\:-hue-rotate-180') {
        @include assert {
          @include output {
            @include \2xl\:-hue-rotate-180;
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              filter: hue-rotate(-180deg);
            }
          }
        }
      }
    }

    @include describe('Custom') {
      @include it('hue-rotate-(270deg)') {
        @include assert {
          @include output {
            @include hue-rotate-(270deg);
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(270deg);
          }
        }
      }

      @include it('-hue-rotate-(270deg)') {
        @include assert {
          @include output {
            @include \-hue-rotate-(270deg);
            @include utils_reset-tw;
          }

          @include expect {
            filter: hue-rotate(-270deg);
          }
        }
      }

      @include it('sm\:hue-rotate-(270deg)') {
        @include assert {
          @include output {
            @include sm\:hue-rotate-(270deg);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              filter: hue-rotate(270deg);
            }
          }
        }
      }

      @include it('sm\:-hue-rotate-(270deg)') {
        @include assert {
          @include output {
            @include sm\:-hue-rotate-(270deg);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_sm) {
              filter: hue-rotate(-270deg);
            }
          }
        }
      }

      @include it('md\:hue-rotate-(270deg)') {
        @include assert {
          @include output {
            @include md\:hue-rotate-(270deg);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              filter: hue-rotate(270deg);
            }
          }
        }
      }

      @include it('md\:-hue-rotate-(270deg)') {
        @include assert {
          @include output {
            @include md\:-hue-rotate-(270deg);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_md) {
              filter: hue-rotate(-270deg);
            }
          }
        }
      }

      @include it('lg\:hue-rotate-(270deg)') {
        @include assert {
          @include output {
            @include lg\:hue-rotate-(270deg);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              filter: hue-rotate(270deg);
            }
          }
        }
      }

      @include it('lg\:-hue-rotate-(270deg)') {
        @include assert {
          @include output {
            @include lg\:-hue-rotate-(270deg);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_lg) {
              filter: hue-rotate(-270deg);
            }
          }
        }
      }

      @include it('xl\:hue-rotate-(270deg)') {
        @include assert {
          @include output {
            @include xl\:hue-rotate-(270deg);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              filter: hue-rotate(270deg);
            }
          }
        }
      }

      @include it('xl\:-hue-rotate-(270deg)') {
        @include assert {
          @include output {
            @include xl\:-hue-rotate-(270deg);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xl) {
              filter: hue-rotate(-270deg);
            }
          }
        }
      }

      @include it('2xl\:hue-rotate-(270deg)') {
        @include assert {
          @include output {
            @include \2xl\:hue-rotate-(270deg);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              filter: hue-rotate(270deg);
            }
          }
        }
      }

      @include it('2xl\:-hue-rotate-(270deg)') {
        @include assert {
          @include output {
            @include \2xl\:-hue-rotate-(270deg);
            @include utils_reset-tw;
          }

          @include expect {
            @media (min-width: $_xxl) {
              filter: hue-rotate(-270deg);
            }
          }
        }
      }
    }
  }
}
